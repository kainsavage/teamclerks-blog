import {respond} from "@sveltejs/kit/ssr";
import {create_ssr_component, validate_component, missing_component, escape, each} from "svelte/internal";
import {setContext, afterUpdate, onMount} from "svelte";
var root_svelte_svelte_type_style_lang = "";
const css$3 = {
  code: "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n</script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}/>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\t{title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>\\n\\t#svelte-announcer {\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\ttop: 0;\\n\\t\\tclip: rect(0 0 0 0);\\n\\t\\tclip-path: inset(50%);\\n\\t\\toverflow: hidden;\\n\\t\\twhite-space: nowrap;\\n\\t\\twidth: 1px;\\n\\t\\theight: 1px;\\n\\t}\\n</style>"],"names":[],"mappings":"AAsDC,iBAAiB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACZ,CAAC"}`
};
const Root = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let {stores} = $$props;
  let {page} = $$props;
  let {components} = $$props;
  let {props_0 = null} = $$props;
  let {props_1 = null} = $$props;
  let {props_2 = null} = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  let mounted = false;
  let navigated = false;
  let title = null;
  onMount(() => {
    const unsubscribe = stores.page.subscribe(() => {
      if (mounted) {
        navigated = true;
        title = document.title || "untitled page";
      }
    });
    mounted = true;
    return unsubscribe;
  });
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page !== void 0)
    $$bindings.page(page);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  $$result.css.add(css$3);
  {
    stores.page.set(page);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {})}` : ``}`
    })}` : ``}`
  })}

${mounted ? `<div id="${"svelte-announcer"}" aria-live="${"assertive"}" aria-atomic="${"true"}" class="${"svelte-1j55zn5"}">${navigated ? `${escape(title)}` : ``}</div>` : ``}`;
});
function set_paths(paths) {
}
function set_prerendering(value) {
}
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
const template = ({head, body}) => '<!DOCTYPE html>\r\n<html lang="en">\r\n	<head>\r\n		<meta charset="utf-8" />\r\n		<link rel="icon" href="/favicon.ico" />\r\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\r\n\r\n		' + head + '\r\n	</head>\r\n	<body>\r\n		<div id="svelte">' + body + "</div>\r\n	</body>\r\n</html>\r\n";
let options = null;
function init(settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: "/./_app/start-adf150ac.js",
      css: ["/./_app/assets/start-a8cd1609.css"],
      js: ["/./_app/start-adf150ac.js", "/./_app/chunks/vendor-2299f040.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id) => "/./_app/" + entry_lookup[id],
    get_stack: (error) => String(error),
    handle_error: (error) => {
      console.error(error.stack);
      error.stack = options.get_stack(error);
    },
    hooks: get_hooks(user_hooks),
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    read: settings.read,
    root: Root,
    router: false,
    ssr: true,
    target: "#svelte",
    template,
    trailing_slash: "never"
  };
}
const empty = () => ({});
const manifest = {
  assets: [{"file": "favicon-16x16.png", "size": 382, "type": "image/png"}, {"file": "favicon-32x32.png", "size": 685, "type": "image/png"}, {"file": "favicon.ico", "size": 15406, "type": "image/vnd.microsoft.icon"}, {"file": "robots.txt", "size": 70, "type": "text/plain"}],
  layout: "src/routes/__layout.svelte",
  error: "src/routes/__error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/index.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/historyblock\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/historyblock.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/about\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/about.svelte"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/historyblock_coming_under_teamclerks\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/historyblock_coming_under_teamclerks.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/github_is_starting_to_impress_me\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/github_is_starting_to_impress_me.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/this_is_going_to_be_a_long_one\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/this_is_going_to_be_a_long_one.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/another_day_another_itemset\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/another_day_another_itemset.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/quick_update_on_deployment\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/quick_update_on_deployment.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/some_thoughts_on_unicorns\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/some_thoughts_on_unicorns.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/minor_pivot_to_content\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/minor_pivot_to_content.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/rebuilt_the_blog_again\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/rebuilt_the_blog_again.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/just_had_a_weird_idea\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/just_had_a_weird_idea.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/wrapping_up_a_fun_one\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/wrapping_up_a_fun_one.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/updates_and_filesize\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/updates_and_filesize.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/deployed_the_blog\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/deployed_the_blog.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/not_much_going_on\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/not_much_going_on.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/styled_components\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/styled_components.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/we_secure,_baby!\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/we_secure,_baby!.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/day_one_failure\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/day_one_failure.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/web_frameworks\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/web_frameworks.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/hello,_world!\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/hello,_world!.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/posts\/dark_theme\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/posts/dark_theme.svx"],
      b: ["src/routes/__error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/posts\/posts\/?$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return posts$2;
      })
    }
  ]
};
const get_hooks = (hooks) => ({
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({request, render: render2}) => render2(request))
});
const module_lookup = {
  "src/routes/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout;
  }),
  "src/routes/__error.svelte": () => Promise.resolve().then(function() {
    return __error;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index;
  }),
  "src/routes/historyblock.svelte": () => Promise.resolve().then(function() {
    return historyblock;
  }),
  "src/routes/about.svelte": () => Promise.resolve().then(function() {
    return about;
  }),
  "src/routes/posts/historyblock_coming_under_teamclerks.svx": () => Promise.resolve().then(function() {
    return historyblock_coming_under_teamclerks;
  }),
  "src/routes/posts/github_is_starting_to_impress_me.svx": () => Promise.resolve().then(function() {
    return github_is_starting_to_impress_me;
  }),
  "src/routes/posts/this_is_going_to_be_a_long_one.svx": () => Promise.resolve().then(function() {
    return this_is_going_to_be_a_long_one;
  }),
  "src/routes/posts/another_day_another_itemset.svx": () => Promise.resolve().then(function() {
    return another_day_another_itemset;
  }),
  "src/routes/posts/quick_update_on_deployment.svx": () => Promise.resolve().then(function() {
    return quick_update_on_deployment;
  }),
  "src/routes/posts/some_thoughts_on_unicorns.svx": () => Promise.resolve().then(function() {
    return some_thoughts_on_unicorns;
  }),
  "src/routes/posts/minor_pivot_to_content.svx": () => Promise.resolve().then(function() {
    return minor_pivot_to_content;
  }),
  "src/routes/posts/rebuilt_the_blog_again.svx": () => Promise.resolve().then(function() {
    return rebuilt_the_blog_again;
  }),
  "src/routes/posts/just_had_a_weird_idea.svx": () => Promise.resolve().then(function() {
    return just_had_a_weird_idea;
  }),
  "src/routes/posts/wrapping_up_a_fun_one.svx": () => Promise.resolve().then(function() {
    return wrapping_up_a_fun_one;
  }),
  "src/routes/posts/updates_and_filesize.svx": () => Promise.resolve().then(function() {
    return updates_and_filesize;
  }),
  "src/routes/posts/deployed_the_blog.svx": () => Promise.resolve().then(function() {
    return deployed_the_blog;
  }),
  "src/routes/posts/not_much_going_on.svx": () => Promise.resolve().then(function() {
    return not_much_going_on;
  }),
  "src/routes/posts/styled_components.svx": () => Promise.resolve().then(function() {
    return styled_components;
  }),
  "src/routes/posts/we_secure,_baby!.svx": () => Promise.resolve().then(function() {
    return we_secure__baby_;
  }),
  "src/routes/posts/day_one_failure.svx": () => Promise.resolve().then(function() {
    return day_one_failure;
  }),
  "src/routes/posts/web_frameworks.svx": () => Promise.resolve().then(function() {
    return web_frameworks;
  }),
  "src/routes/posts/hello,_world!.svx": () => Promise.resolve().then(function() {
    return hello__world_;
  }),
  "src/routes/posts/dark_theme.svx": () => Promise.resolve().then(function() {
    return dark_theme;
  })
};
const metadata_lookup = {"src/routes/__layout.svelte": {"entry": "/./_app/pages/__layout.svelte-a94b59d2.js", "css": ["/./_app/assets/pages/__layout.svelte-bed92c7b.css", "/./_app/assets/app-4308963c.css"], "js": ["/./_app/pages/__layout.svelte-a94b59d2.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/__error.svelte": {"entry": "/./_app/pages/__error.svelte-d7841ad2.js", "css": ["/./_app/assets/app-4308963c.css"], "js": ["/./_app/pages/__error.svelte-d7841ad2.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/index.svelte": {"entry": "/./_app/pages/index.svelte-eded442f.js", "css": ["/./_app/assets/pages/index.svelte-5bc99f17.css"], "js": ["/./_app/pages/index.svelte-eded442f.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/historyblock.svelte": {"entry": "/./_app/pages/historyblock.svelte-6e69fc88.js", "css": [], "js": ["/./_app/pages/historyblock.svelte-6e69fc88.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/about.svelte": {"entry": "/./_app/pages/about.svelte-5b1f9b77.js", "css": [], "js": ["/./_app/pages/about.svelte-5b1f9b77.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/historyblock_coming_under_teamclerks.svx": {"entry": "/./_app/pages/posts/historyblock_coming_under_teamclerks.svx-10a05956.js", "css": [], "js": ["/./_app/pages/posts/historyblock_coming_under_teamclerks.svx-10a05956.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/github_is_starting_to_impress_me.svx": {"entry": "/./_app/pages/posts/github_is_starting_to_impress_me.svx-ab82a986.js", "css": [], "js": ["/./_app/pages/posts/github_is_starting_to_impress_me.svx-ab82a986.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/this_is_going_to_be_a_long_one.svx": {"entry": "/./_app/pages/posts/this_is_going_to_be_a_long_one.svx-dd9b3d82.js", "css": [], "js": ["/./_app/pages/posts/this_is_going_to_be_a_long_one.svx-dd9b3d82.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/another_day_another_itemset.svx": {"entry": "/./_app/pages/posts/another_day_another_itemset.svx-658f1674.js", "css": [], "js": ["/./_app/pages/posts/another_day_another_itemset.svx-658f1674.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/quick_update_on_deployment.svx": {"entry": "/./_app/pages/posts/quick_update_on_deployment.svx-e508ad44.js", "css": [], "js": ["/./_app/pages/posts/quick_update_on_deployment.svx-e508ad44.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/some_thoughts_on_unicorns.svx": {"entry": "/./_app/pages/posts/some_thoughts_on_unicorns.svx-385ee83f.js", "css": [], "js": ["/./_app/pages/posts/some_thoughts_on_unicorns.svx-385ee83f.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/minor_pivot_to_content.svx": {"entry": "/./_app/pages/posts/minor_pivot_to_content.svx-348f60d1.js", "css": [], "js": ["/./_app/pages/posts/minor_pivot_to_content.svx-348f60d1.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/rebuilt_the_blog_again.svx": {"entry": "/./_app/pages/posts/rebuilt_the_blog_again.svx-05e51ac9.js", "css": [], "js": ["/./_app/pages/posts/rebuilt_the_blog_again.svx-05e51ac9.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/just_had_a_weird_idea.svx": {"entry": "/./_app/pages/posts/just_had_a_weird_idea.svx-bcbca27f.js", "css": [], "js": ["/./_app/pages/posts/just_had_a_weird_idea.svx-bcbca27f.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/wrapping_up_a_fun_one.svx": {"entry": "/./_app/pages/posts/wrapping_up_a_fun_one.svx-2a181cf4.js", "css": [], "js": ["/./_app/pages/posts/wrapping_up_a_fun_one.svx-2a181cf4.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/updates_and_filesize.svx": {"entry": "/./_app/pages/posts/updates_and_filesize.svx-dda79655.js", "css": [], "js": ["/./_app/pages/posts/updates_and_filesize.svx-dda79655.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/deployed_the_blog.svx": {"entry": "/./_app/pages/posts/deployed_the_blog.svx-4bc3bd7e.js", "css": [], "js": ["/./_app/pages/posts/deployed_the_blog.svx-4bc3bd7e.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/not_much_going_on.svx": {"entry": "/./_app/pages/posts/not_much_going_on.svx-8e4264a2.js", "css": [], "js": ["/./_app/pages/posts/not_much_going_on.svx-8e4264a2.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/styled_components.svx": {"entry": "/./_app/pages/posts/styled_components.svx-1f77e832.js", "css": [], "js": ["/./_app/pages/posts/styled_components.svx-1f77e832.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/we_secure,_baby!.svx": {"entry": "/./_app/pages/posts/we_secure,_baby!.svx-673d0e8c.js", "css": [], "js": ["/./_app/pages/posts/we_secure,_baby!.svx-673d0e8c.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/day_one_failure.svx": {"entry": "/./_app/pages/posts/day_one_failure.svx-85228574.js", "css": [], "js": ["/./_app/pages/posts/day_one_failure.svx-85228574.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/web_frameworks.svx": {"entry": "/./_app/pages/posts/web_frameworks.svx-62b82c0e.js", "css": [], "js": ["/./_app/pages/posts/web_frameworks.svx-62b82c0e.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/hello,_world!.svx": {"entry": "/./_app/pages/posts/hello,_world!.svx-63372628.js", "css": [], "js": ["/./_app/pages/posts/hello,_world!.svx-63372628.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}, "src/routes/posts/dark_theme.svx": {"entry": "/./_app/pages/posts/dark_theme.svx-0bf57e04.js", "css": [], "js": ["/./_app/pages/posts/dark_theme.svx-0bf57e04.js", "/./_app/chunks/vendor-2299f040.js"], "styles": null}};
async function load_component(file) {
  return {
    module: await module_lookup[file](),
    ...metadata_lookup[file]
  };
}
init({paths: {"base": "", "assets": "/."}});
function render(request, {
  prerender: prerender2
} = {}) {
  const host = request.headers["host"];
  return respond({...request, host}, options, {prerender: prerender2});
}
const posts = [
  {
    name: "Wrapping Up a Fun One",
    date: "2021-02-12"
  },
  {
    name: "Another Day Another Itemset",
    date: "2021-02-11"
  },
  {
    name: "Quick Update on Deployment",
    date: "2021-02-10"
  },
  {
    name: "Minor Pivot to Content",
    date: "2021-02-09"
  },
  {
    name: "Some Thoughts on Unicorns",
    date: "2019-09-05"
  },
  {
    name: "Day One Failure",
    date: "2019-09-04"
  },
  {
    name: "Web Frameworks",
    date: "2019-08-21"
  },
  {
    name: "This is Going to be a Long One",
    date: "2019-08-20"
  },
  {
    name: "Styled Components",
    date: "2019-05-03"
  },
  {
    name: "Dark Theme",
    date: "2019-05-03"
  },
  {
    name: "Just Had a Weird Idea",
    date: "2019-05-01"
  },
  {
    name: "Deployed the Blog",
    date: "2019-04-30"
  },
  {
    name: "Rebuilt the Blog Again",
    date: "2019-04-19"
  },
  {
    name: "HistoryBlock Coming Under TeamClerks",
    date: "2017-08-29"
  },
  {
    name: "Github is Starting to Impress Me",
    date: "2017-07-05"
  },
  {
    name: "Updates and Filesize",
    date: "2017-06-08"
  },
  {
    name: "Not Much Going on",
    date: "2017-06-02"
  },
  {
    name: "We Secure, Baby!",
    date: "2017-05-18"
  },
  {
    name: "Hello, World!",
    date: "2017-05-17"
  }
];
var posts$1 = {
  posts
};
var posts$2 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  posts,
  "default": posts$1
});
var header_svelte_svelte_type_style_lang = "";
const css$2 = {
  code: "header.svelte-1ng24nc{margin-bottom:1.45rem}.container.svelte-1ng24nc{margin:0 auto;padding:1.45rem 1.0875rem}h1.svelte-1ng24nc{margin:0}a.svelte-1ng24nc{color:white;text-decoration:none}",
  map: '{"version":3,"file":"header.svelte","sources":["header.svelte"],"sourcesContent":["<script>\\r\\n</script>\\r\\n\\r\\n<header>\\r\\n\\t<div class=\\"container\\">\\r\\n\\t\\t<h1>\\r\\n\\t\\t\\t<a href=\\"/\\">TeamClerks</a>\\r\\n\\t\\t</h1>\\r\\n\\t</div>\\r\\n</header>\\r\\n\\r\\n<style>\\r\\n\\theader {\\r\\n\\t\\tmargin-bottom: 1.45rem;\\r\\n\\t}\\r\\n\\t.container {\\r\\n\\t\\tmargin: 0 auto;\\r\\n\\t\\tpadding: 1.45rem 1.0875rem;\\r\\n\\t}\\r\\n\\th1 {\\r\\n\\t\\tmargin: 0;\\r\\n\\t}\\r\\n\\ta {\\r\\n\\t\\tcolor: white;\\r\\n\\t\\ttext-decoration: none;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAYC,MAAM,eAAC,CAAC,AACP,aAAa,CAAE,OAAO,AACvB,CAAC,AACD,UAAU,eAAC,CAAC,AACX,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,OAAO,CAAC,SAAS,AAC3B,CAAC,AACD,EAAE,eAAC,CAAC,AACH,MAAM,CAAE,CAAC,AACV,CAAC,AACD,CAAC,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,CACZ,eAAe,CAAE,IAAI,AACtB,CAAC"}'
};
const Header = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$2);
  return `<header class="${"svelte-1ng24nc"}"><div class="${"container svelte-1ng24nc"}"><h1 class="${"svelte-1ng24nc"}"><a href="${"/"}" class="${"svelte-1ng24nc"}">TeamClerks</a></h1></div>
</header>`;
});
function slugify(input) {
  return input.toLowerCase().replace(/ /g, "_");
}
var app = "";
var __layout_svelte_svelte_type_style_lang = "";
const css$1 = {
  code: "section.svelte-h5s9z5.svelte-h5s9z5{display:flex;flex-direction:row}.left-nav.svelte-h5s9z5.svelte-h5s9z5{padding:0 0 0 2%;width:250px;display:flex;flex-direction:column}.left-nav.svelte-h5s9z5 h5.svelte-h5s9z5{margin-bottom:8px}.left-nav.svelte-h5s9z5 ul.svelte-h5s9z5{margin:0}.left-nav.svelte-h5s9z5 ul li.svelte-h5s9z5{margin:0}.left-nav.svelte-h5s9z5 .post.svelte-h5s9z5{display:flex;flex-direction:row;width:100%}.left-nav.svelte-h5s9z5 .post a.svelte-h5s9z5{width:80%;font-size:0.8em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding:0 10px 0 0}.left-nav.svelte-h5s9z5 .post span.svelte-h5s9z5{font-size:0.6em;align-self:flex-end}main.svelte-h5s9z5.svelte-h5s9z5{width:75%;padding:0 2% 0px}",
  map: `{"version":3,"file":"__layout.svelte","sources":["__layout.svelte"],"sourcesContent":["<script>\\r\\n\\timport Header from '$lib/components/header.svelte';\\r\\n\\timport {slugify} from \\"$lib/utils/string_helper.js\\";\\r\\n\\timport '../app.css';\\r\\n\\r\\n\\timport posts from \\"./posts/posts.json\\";\\r\\n</script>\\r\\n\\r\\n<Header />\\r\\n<section>\\r\\n\\t<div class=\\"left-nav\\">\\r\\n\\t\\t<h5>Posts</h5>\\r\\n\\t\\t<ul>\\r\\n\\t\\t\\t{#each posts.posts as post}\\r\\n\\t\\t\\t\\t<li class=\\"post\\">\\r\\n\\t\\t\\t\\t\\t<a href=\\"/posts/{slugify(post.name)}\\">{post.name}</a>\\r\\n\\t\\t\\t\\t\\t<span>{post.date}</span>\\r\\n\\t\\t\\t\\t</li>\\r\\n\\t\\t\\t{/each}\\r\\n\\t\\t</ul>\\r\\n\\t</div>\\r\\n\\t<main>\\r\\n\\t\\t<slot />\\r\\n\\t\\t<footer>\\r\\n\\t\\t\\t\xA9 {new Date().getFullYear()}{\\" \\"}\\r\\n\\t\\t\\tTeamClerks\\r\\n\\t\\t</footer>\\r\\n\\t</main>\\r\\n</section>\\r\\n\\r\\n<style>\\r\\n\\tsection {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t}\\r\\n\\t.left-nav {\\r\\n\\t\\tpadding: 0 0 0 2%;\\r\\n\\t\\twidth: 250px;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: column;\\r\\n\\t}\\r\\n\\t.left-nav h5 {\\r\\n\\t\\tmargin-bottom: 8px;\\r\\n\\t}\\r\\n\\t.left-nav ul {\\r\\n\\t\\tmargin: 0;\\r\\n\\t}\\r\\n\\t.left-nav ul li {\\r\\n\\t\\tmargin: 0;\\r\\n\\t}\\r\\n\\t.left-nav .post {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: row;\\r\\n\\t\\twidth: 100%;\\r\\n\\t}\\r\\n\\t.left-nav .post a {\\r\\n\\t\\twidth: 80%;\\r\\n\\t\\tfont-size: 0.8em;\\r\\n\\t\\twhite-space: nowrap;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\ttext-overflow: ellipsis;\\r\\n\\t\\tpadding: 0 10px 0 0;\\r\\n\\t}\\r\\n\\t.left-nav .post span {\\r\\n\\t\\tfont-size: 0.6em;\\r\\n\\t\\talign-self: flex-end;\\r\\n\\t}\\r\\n\\tmain {\\r\\n\\t\\twidth: 75%;\\r\\n\\t\\tpadding: 0 2% 0px;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AA+BC,OAAO,4BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,AACpB,CAAC,AACD,SAAS,4BAAC,CAAC,AACV,OAAO,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CACjB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACvB,CAAC,AACD,uBAAS,CAAC,EAAE,cAAC,CAAC,AACb,aAAa,CAAE,GAAG,AACnB,CAAC,AACD,uBAAS,CAAC,EAAE,cAAC,CAAC,AACb,MAAM,CAAE,CAAC,AACV,CAAC,AACD,uBAAS,CAAC,EAAE,CAAC,EAAE,cAAC,CAAC,AAChB,MAAM,CAAE,CAAC,AACV,CAAC,AACD,uBAAS,CAAC,KAAK,cAAC,CAAC,AAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,KAAK,CAAE,IAAI,AACZ,CAAC,AACD,uBAAS,CAAC,KAAK,CAAC,CAAC,cAAC,CAAC,AAClB,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,QAAQ,CACvB,OAAO,CAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,AACpB,CAAC,AACD,uBAAS,CAAC,KAAK,CAAC,IAAI,cAAC,CAAC,AACrB,SAAS,CAAE,KAAK,CAChB,UAAU,CAAE,QAAQ,AACrB,CAAC,AACD,IAAI,4BAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,CAAC,CAAC,EAAE,CAAC,GAAG,AAClB,CAAC"}`
};
const _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$1);
  return `${validate_component(Header, "Header").$$render($$result, {}, {}, {})}
<section class="${"svelte-h5s9z5"}"><div class="${"left-nav svelte-h5s9z5"}"><h5 class="${"svelte-h5s9z5"}">Posts</h5>
		<ul class="${"svelte-h5s9z5"}">${each(posts$1.posts, (post) => `<li class="${"post svelte-h5s9z5"}"><a href="${"/posts/" + escape(slugify(post.name))}" class="${"svelte-h5s9z5"}">${escape(post.name)}</a>
					<span class="${"svelte-h5s9z5"}">${escape(post.date)}</span>
				</li>`)}</ul></div>
	<main class="${"svelte-h5s9z5"}">${slots.default ? slots.default({}) : ``}
		<footer>\xA9 ${escape(new Date().getFullYear())}${escape(" ")}
			TeamClerks
		</footer></main>
</section>`;
});
var __layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _layout
});
const _error = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<div><h1>OOPS!</h1>

    The requested object could not be found.
</div>`;
});
var __error = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _error
});
var index_svelte_svelte_type_style_lang = "";
const css = {
  code: "h1.svelte-mjk9ig{width:100%}",
  map: '{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script context=\\"module\\">\\r\\n\\texport const prerender = true;\\r\\n</script>\\r\\n\\r\\n<svelte:head>\\r\\n\\t<title>Home | TeamClerks</title>\\r\\n</svelte:head>\\r\\n\\r\\n<h1>Welcome</h1>\\r\\n\\r\\n<p>\\r\\n\\tTeamClerks is an entity I founded around 2001. Originally, it was a gaming clan amongst my\\r\\n\\tclose friends. Eventually, it grew into a side-business (I built and sold custom gaming\\r\\n\\tcomputers for a while during college).\\r\\n</p>\\r\\n\\r\\n<p>I am unsure what TeamClerks is today.</p>\\r\\n\\r\\n<p>\\r\\n\\tCurrently, I am treating it as my personal development sandbox to try out new technologies\\r\\n\\tand implement ideas I have. This site, for instance, is a blog I built using React as the\\r\\n\\tfront-end because I wanted to try it out.\\r\\n</p>\\r\\n\\r\\n<p>This website is also the home of <a href=\\"/historyblock\\">HistoryBlock</a>.</p>\\r\\n\\r\\n<style>\\r\\n\\tsection {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: column;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tflex: 1;\\r\\n\\t}\\r\\n\\r\\n\\th1 {\\r\\n\\t\\twidth: 100%;\\r\\n\\t}\\r\\n\\r\\n\\t.welcome {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 0;\\r\\n\\t\\tpadding: 0 0 calc(100% * 495 / 2048) 0;\\r\\n\\t}\\r\\n\\r\\n\\t.welcome img {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\ttop: 0;\\r\\n\\t\\tdisplay: block;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAmCC,EAAE,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,AACZ,CAAC"}'
};
const prerender$1 = true;
const Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${$$result.head += `${$$result.title = `<title>Home | TeamClerks</title>`, ""}`, ""}

<h1 class="${"svelte-mjk9ig"}">Welcome</h1>

<p>TeamClerks is an entity I founded around 2001. Originally, it was a gaming clan amongst my
	close friends. Eventually, it grew into a side-business (I built and sold custom gaming
	computers for a while during college).
</p>

<p>I am unsure what TeamClerks is today.</p>

<p>Currently, I am treating it as my personal development sandbox to try out new technologies
	and implement ideas I have. This site, for instance, is a blog I built using React as the
	front-end because I wanted to try it out.
</p>

<p>This website is also the home of <a href="${"/historyblock"}">HistoryBlock</a>.</p>`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Routes,
  prerender: prerender$1
});
const prerender = true;
const Historyblock = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${$$result.head += `${$$result.title = `<title>HistoryBlock | TeamClerks</title>`, ""}`, ""}

<h1>HistoryBlock</h1>
<h5>Current Version:${escape(" ")}
    <a href="${"https://addons.mozilla.org/en-US/firefox/addon/historyblock/"}">v.2.0.0
    </a></h5>

<p>HistoryBlock was originally a Firefox addon that I created severar years
    ago. I have ported HistoryBlock to use the standardized${escape(" ")}
    <a href="${"https://developer.mozilla.org/en-US/Add-ons/WebExtensions"}">Web Extension APIs
    </a>
    .
</p>

<p>HistoryBlock is an addon for blocking unwanted entries from showing up
    in the browser&#39;s history (as well as caches, cookies, local storage,
    etc). HistoryBlock was originally developed before Private Browsing Mode
    was available, but it still serves a purpose even while Private Browsing
    Mode exists.
</p>

<p>Currently, I am working on v2.1.0 which will include a lot of
    long-awaited feature requests. You can view the${escape(" ")}
    <a href="${"https://github.com/kainsavage/HistoryBlock/projects/1"}">v.2.1.0 kanban
    </a>${escape(" ")}
    (which conveniently illustrates what currently is, will be in the
    future, or has been worked on).
</p>

<p>If you have a feature request or bug to report, you can search for
    answers or open an issue on the${escape(" ")}
    <a href="${"https://github.com/kainsavage/HistoryBlock/issues"}">issue tracker
    </a>
    .
</p>`;
});
var historyblock = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Historyblock,
  prerender
});
const About = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1>About</h1>
<p>TeamClerks is an entity I founded around 2001. Originally, it was a
    gaming clan amongst my close friends. Eventually, it grew into a
    side-business (I built and sold custom gaming computers for a while
    during college).
</p>

<p>I am unsure what TeamClerks is today.</p>

<p>Currently, I am treating it as my personal development sandbox to try
    out new technologies and implement ideas I have. This site, for
    instance, is a blog I built using React as the front-end because I
    wanted to try it out.
</p>`;
});
var about = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": About
});
const Historyblock_coming_under_teamclerks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"historyblock-coming-under-teamclerks"}"><a href="${"#historyblock-coming-under-teamclerks"}">HistoryBlock Coming Under TeamClerks</a></h1>
<p>I have added a new topnav link to a dedicated page about HistoryBlock, an addon I wrote for Firefox years ago. With the
next release of HistoryBlock, v2.1.0, it will have a new extension identifier - going from <code>historyblock@kain</code>
to <code>historyblock@teamclerks.net</code>. For a very long time, I have been hesitant to connect HistoryBlock and TeamClerks for
reasons unknown, but I left the two entities separate until one day I was working on a task and say the extension
identifier <code>historyblock@kain</code> next to all the other extensions with identifiers like <code>activity-stream@mozilla.org</code>, and
I felt shame for not having more pride in my work.</p>
<p>So, as the title suggests, once HistoryBlock v2.1.0 is released, it will come under the TeamClerks suite of tools (which
currently consists of zero tools). My hope is to build more pieces of software under the TeamClerks name, moving
forward.</p>
<p>Unrelated - it has been quite a while (almost two months) since my last post, and even longer since I had updated the
site in any meaningful way. I am also hoping to improve the site in the near future by freeingup a little bit of time
here and there to work on new features and enhancements alike.</p>`;
});
var historyblock_coming_under_teamclerks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Historyblock_coming_under_teamclerks
});
const Github_is_starting_to_impress_me = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"github-is-starting-to-impress-me"}"><a href="${"#github-is-starting-to-impress-me"}">Github is Starting to Impress Me</a></h1>
<h3 id="${"preface"}"><a href="${"#preface"}">Preface</a></h3>
<p>I have never been a fan of Agile. I realize that this is a can of worms and there are as many opinions as there are
stars in the sky, but please allow me to at least provide some reasoning. First, there is the high-level Agile opinions
and then there are people who practice Agile, and these two things are <strong>very</strong> often at odds with one another. Second,
Agile fits one type of project and people who practice Agile <strong>very</strong> often treat Agile as their hammer, and that causes
all projects to look like nails. Third, people who practice Agile <strong>very</strong> often assume that everyone else also sees the
programming world from their vantage. Fourth, people who practice Agile <strong>very</strong> often estimate using \u2018story points\u2019
which <strong>very</strong> often do not translate to actual developer hours.</p>
<p>Let me tackle that second statement first. There are TONS of types of projects which do not benefit the Agile practices,
and there is really only <strong>one</strong> type of project that does (though, the definition is broad): the long-lived project
long-lived developers with \u201Cinfinite\u201D budget. Practitioners of Agile will be quick to tell me that the methodology works
on short projects or projects where members are dropped/replaced often, but that has never been my experience in either
case. First, short-lived projects usually mean that they have an end date; some tangible stop that needs to be met. That
is, \u201Cafter XDate, we will no longer work on this project,\u201D and that usually scares Agilers (I am just going to use
this\u2026 it reads annoyingly to me, but I cannot keep typing \u2018Agile Practitioners\u2019 and the like) because of the fourth
reason listed above.</p>
<p>Which brings me to point <a href="${"https://github.com/svelte-add/mdsvex/issues/4"}">#4</a>. Agilers are reluctant to put an actual estimate of time to a task because Agilers are
<strong>very</strong> often not experienced at estimating work in terms of hours and therefore very bad at it. Additionally, though
this is simply my experience, the person(s) leading the team are very often not developers themselves, and as such truly
have no idea how to estimate work in terms of hours. In the <strong>few</strong> projects wherein the project lead <strong>was</strong> a
developer, they often had enough experience and understanding of the entire project to be able to come up with tangible
estimates in terms of hours, but very often were inexperienced in doing so and therefore grossly underestimated the work
required.</p>
<p>I have no segue (I have never typed this word correctly before today) for this, but the first and second issues listed
above are basically the first and last problems. Agilers are so sure that everyone added to the team is also an Agiler
that all knowledge required to get up to speed on the project is taken as given. For example, Agilers almost <strong>always</strong>
assume that everyone knows the following:</p>
<ol><li>Documentation is on Confluence/ReadTheDocs/etc</li>
<li>Github houses the code</li>
<li>Issues are in Jira</li>
<li>Discussions are either in-person or on Slack/Skype/etc</li></ol>
<p>I, personally, cannot stand having this many services involved in any one project. One project should have one source of
truth, right? Why on earth would I update some documentation service that does not live with the project? Why are tasks
captured in Jira AND (or AND NOT) in Github? Why would design discussions happen anywhere but the issues to which they
belong?</p>
<h3 id="${"actual-blog-post"}"><a href="${"#actual-blog-post"}">Actual Blog Post</a></h3>
<p>Github has answered basically all my problems with the separation of concerns in a single project.</p>
<p>I have long been a proponent of \u201Cwe should only have <strong>one</strong> issue list\u201D and I usually follow that up with \u201Cand it
should live alongside the code.\u201D Github has provided this since inception, which is a good thing; the issue list can be
curated by the developers/managers on the team and all discussions can occur there and capture a living history. Great;
done\u2026 Jira is gone forever and the \u201Ceveryone knows everyone uses Jira for issues (and maybe in addition to mirrored
issues on Github)\u201D taken-as-given can get lost. This covers my complaints <a href="${"https://github.com/svelte-add/mdsvex/issues/2"}">#2</a>/3/4 very nicely, and actually has been
available for a long time. Addressing <a href="${"https://github.com/svelte-add/mdsvex/issues/1"}">#1</a> is pretty easy as Github has had Wiki pages for the repository as well
as <code>README.md</code> support as well.</p>
<p>Enter the problem, project leads are <strong>often</strong> (in my experience) not technical folk; they want some way to gather data
about the performance of the team and the schedule of the project. This is where Jira shines - you get a kanban, you get
milestones, you get a burndown, you get tracking of task position (in progress, todo, etc), and Jira does this in a
pretty way that until recently Github did not provide.</p>
<p>Recently (I believe), Github added a view called <code>Projects</code> to every repository. <code>Projects</code> is basically a kanban on
steroids. I can create a <code>Project</code>, create a bunch of columns on the board, and organize/manage the project. However,
where this really shines is in the fact that it completely integrates with everything I already get from Github - issue
tracker, pull request tracker, documentation, releases, etc. I can create a <code>Project</code> in the traditional Agile way
called \u201CSprint 12,\u201D set and end-date for it, triage all untriaged issues into the correct columns, view activity in
the <code>Project</code> (who did what and when), filter as needed, and so on and so on.</p>
<p>Okay, so Github naturally answers all the questions from above <strong>and</strong> solves the problem the managers created.</p>`;
});
var github_is_starting_to_impress_me = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Github_is_starting_to_impress_me
});
const This_is_going_to_be_a_long_one = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"this-is-going-to-be-a-long-one"}"><a href="${"#this-is-going-to-be-a-long-one"}">This is Going to be a Long One</a></h1>
<h1 id="${"the-long-one"}"><a href="${"#the-long-one"}">The Long One</a></h1>
<h2 id="${"prologue"}"><a href="${"#prologue"}">Prologue</a></h2>
<p>Tomorrow is my thirteenth anniversary at work. I will be starting my fourteenth year with this company tomorrow. I have
grown from the position of a trial-basis junior developer to my current position in senior management. I have seen
subordinates, colleagues, and bosses come and go. I have had the privilege of working with lots of intelligent,
hilarious, and driven folk.</p>
<p>That foreward, after rereading, feels like I am about to quit; I am not. I simply wanted to express how long I have been
doing what I do; though, that has also changed over time.</p>
<h2 id="${"the-blog"}"><a href="${"#the-blog"}">The Blog</a></h2>
<p>On January 11, 2008, I started my very first blog. I was twenty-four years young, and that was my first time writing
anything that was not going to be graded by a teacher or edited by a manager. As I put it, it was \u201Can outlet for my
befuddled mind.\u201D</p>
<p>This blog was devoted to writing about World of Warcraft: my passion in gaming at the time. I played a Feral Druid
exclusively at first, and opened up to playing a Rogue and a Warlock later; however, I never stopped loving the Feral
Druid. The blog was called <code>Druidify</code> (it is still there on <a href="${"https://druidify.blogspot.com"}" rel="${"nofollow"}">Blogspot</a>), and I wrote a
LOT about maining a Feral Druid and player-vs-player competition.</p>
<p>It is funny: I am going through some of the posts I wrote there and watching my mood bounce around. I am noticing ways
of writing that I have given up. At first I did not have any readers (I never expected to actually have readers, but if
you write enough, write in the forums enough, and play well enough people may just want to read what you have to say)
and so I wrote for myself. I would get into the office very early in the morning and almost no one was in, so I would
pour myself a coffee, handle my emails (when I was younger, I did not get nearly as many emails that required my
attention; now it takes an hour out of my mornings, usually), and sit down and write a blog post.</p>
<p>It was my daily catharsis, and I miss it.</p>
<h2 id="${"creation-and-motivation"}"><a href="${"#creation-and-motivation"}">Creation and Motivation</a></h2>
<p>Creativity is hard. I have never been particularly good at creating. My skillset is more aligned with problem-solving; I
either work through problems, or build tools to help me work through problems. I do not really feel like tool-building
is a creative process, but I suppose it must be. For me, it is simply a meta-problem: solve that problem and you have a
tool to solve some other problem. The inputs and outputs are knowns, the user stories are self-evident because they
are <strong>my</strong> stories, and the DOD is when I can move past the meta-problem to the real problem.</p>
<p>Simple example: originally, I did not want WoW Forums to show up in my browser history. That was the problem, so I made
a tool: HistoryBlock. This tool allows me to specify domains which should never appear in my browser history. If you
look at the HistoryBlock repository today, you will find that there are tasks to do and I simply have not found the
motivation. HistoryBlock, as it exists, is the tool I want it to be and nothing more.</p>
<p>Creating HistoryBlock was fun. I might even go so far to say completing HistoryBlock was fun. However, I do not <strong>feel</strong>
the user stories for the tasks that are sitting in the project. I understand them, and I think they would be fine
additions, but I do not need them and so it is hard for me to get motivated to work on my project.</p>
<h2 id="${"this-blog"}"><a href="${"#this-blog"}">This Blog</a></h2>
<p>As I have already written, I tend to play with technologies by rewriting my blog every now and again. That said, I have
not written a blog post here in three months. This is very common for me - I build something simple to prove that I
understand it enough to work with it, play with it a bit (write some posts, in this case), then walk away.</p>
<p>I am going to try something different.</p>
<p>It seems to me that motivation is self-feeding. Very often, when I do nothing productive, it feeds itself such that I
continue to do nothing. In the past, when I would write blog posts, I would continue to write blog posts. So, I am going
to just write blog posts again to see if it helps motivate me to do other things.</p>
<p>Inertia is a bitch.</p>
<h2 id="${"product"}"><a href="${"#product"}">Product</a></h2>
<p>I wrote my last <code>Druidify</code> post on Monday, October 15, 2012. Roughly marking the half-way point between the start of my
tenure at work and today, August 20, 2019.</p>
<p>For four years I wrote almost every day about something that mattered to me. It was a silly game that I have not played
in years, but it meant something to me at that time. I have not had anything that has taken root so deeply in my mind to
warrant writing since then, and I am troubled in that realization.</p>
<p>World of Warcraft is a game \u2014 it is for the gamer\u2019s consumption. However, for four years I took what I consumed and made
a product\u2026 I created. Sure, they were just thoughts and words and ultimately no one read most of them, but for four
years I was creating a product and that filled me with a sense of self-worth that I have missed for a long time.</p>
<p>I understand this feeling better, I think, now that I am older. I do not believe I was doing it for this purpose, but I
think I understand why I enjoyed doing it. I see analogues in other mediums, now. Twitch and YouTube now support gamers
by giving them a way to make a living while playing games. Playing the games is only one part of the experience. I think
that creating and interacting with a community is the real value for which consumers pay.</p>
<h2 id="${"epilogue"}"><a href="${"#epilogue"}">Epilogue</a></h2>
<p>I have no idea what I will write about, but I think that I should write. I will probably pick random tech topics that I
find interesting. I will endevour to not discuss politics, but I am over 35 with a family now, so it is pretty much the
only MMORPG I have left to play. I could write about the Dodgers, but that is just an AFKRPG that I play.</p>
<p>I have deliberately not implemented/incorporated a comment system because I am not looking for a discussion. I am happy
to receive feedback via email, but know that I may simply ignore it. I, once again, want to write as an outlet for my
befuddled mind.</p>`;
});
var this_is_going_to_be_a_long_one = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": This_is_going_to_be_a_long_one
});
const Another_day_another_itemset = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"another-day-another-itemset"}"><a href="${"#another-day-another-itemset"}">Another Day Another Itemset</a></h1>
<h3 id="${"continued-hk-item-randomizer"}"><a href="${"#continued-hk-item-randomizer"}">Continued HK Item Randomizer</a></h3>
<p>As I said yesterday, I woke up at the toll bench in City of Tears, and went down to collect my third nail upgrade before
setting out to collect more items. At this point, the world is wide open to me and I just need to decide what is the
best use of my time. So, I decide to hit up the Ancient Basin. In recent runs, basin has been very good item-wise - the
pale ore was a relic, the fountain was Grubberfly\u2019s, the King\u2019s Idol under the Mawlurks, however, was Monarch Wings (
almost perfect placement given the next item would have been the Monarch Wings item, which was another relic).</p>
<p>From here, the world is completely opened to me except for shade dash areas (which there are only like three or four of
note). I decide to head into Deepnest since I have the Tram Pass and it is a quick hop from Ancient Basin. The Vessel
was a Vessel, Nosk\u2019s Pale Ore was a relic, the Tram Pass item was the Distant Village stag, which was really nice since
that is basically a short-cut.</p>
<p>I head into the Distant Village even though I do not have the Dreamnail, yet. My thinking was that I could gather the
relic and clear my way to the bench, and when I get Dreamnail later, I could just bench-warp back. From here, I head out
to get into the Weaver\u2019s Den, where I collect a relic and a charm notch.</p>
<p>At this point in HKIR runs, I have exhausted a <em>lot</em> of what I can do to get a <em>bunch</em> of items. I decided that the last
true \u201Cget a bunch of items\u201D run was Kingdon\u2019s Edge. First, I collect the relic item directly up the wall, then head over
to do Hornet2. From there, I drop down to do the Nail Master and to pick up Quickslash\u2019s item. Then, I bench-warp back
to the camp and head up for the coliseum and the Pale Lurker (there are two King\u2019s Idol item pickups; one on the way and
one at Pale Lurker). All tolled, I pick up more non-progression items, but still have yet to find my third dreamer or
the Dreamnail. Again, I am running out of runs that collect lots of items.</p>
<p>Since I picked up the Monarch Wings, I bench-warp back to Crystal Guardian and do his second fight. Finally, I get the
Dreamnail. Next I head over and clear my way to the Queen\u2019s Gardens stag station. Not much to speak of item-wise, but I
am collecting a lot of charms/notches/masks/vessels at this point.</p>
<p>Lastly, I do a bunch of bench-warps all over to collect stuff I had to leave behind because I was missing a progression
item - Bretta (and her item back in Dirtmouth), the dreamers I had to leave behind, and finally did Uumuu and collected
that item.</p>`;
});
var another_day_another_itemset = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Another_day_another_itemset
});
const Quick_update_on_deployment = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"quick-update-on-deployment"}"><a href="${"#quick-update-on-deployment"}">Quick Update on Deployment</a></h1>
<h2 id="${"github-actions"}"><a href="${"#github-actions"}">Github Actions</a></h2>
<p>I used to deploy these posts via Travis-CI, but I decided to give Github Actions a try since we have had good
experiences with them at work. So far, I like it. It makes it really simple to draft a new release (blog post).</p>
<h3 id="${"minor-hk-randomizer-update"}"><a href="${"#minor-hk-randomizer-update"}">Minor HK Randomizer Update</a></h3>
<p>I played some more on my save from yesterday this morning and started into the Fungal Wastes. Pretty quickly, I ended up
finding the Mantis Claw, which means that I have Isma\u2019s, Claw, and Cloak. Essentially, the entire map is opened up for
me. I immediately went to Salubra to do a quick shade skip to get into Blue Lake, collect the item at Dreamnail and
Dreamshield, then I doubled back into the City of Tears. I had also picked up a Pale ore somewhere along the way, so I
decided to get the two items in the elevator from Resting Grounds area, grab the two items at King\u2019s Station, then
headed to get the bench in the Spire. I did not continue up the Spire because I wanted to run over and grab my nail
upgrades first (since I had a Pale Ore, I could get two).</p>
<p>From there, I went up to the toll bench and continued up to get the next stag at City Storerooms, which means four more
items: the key item, the stag item, and the Wanderer\u2019s Journal outside that, and the Vessel Fragment item. One of these
items was Crystal Dash, and the other ended up being Desolate Dive, so I decided to take a detour and do Soul Sanctum.
Lastly, I dropped down to sell to Lem.</p>
<p>From there, I warped back to the Spire and did Watcher Nights, even though I did not have the Dreamnail, to get the
chest item which was a Pale Ore. From here, I warped back to Resting Grounds to collect the items in the grave and found
another Pale Ore (although, I only now realized that I did not check the Grey Mourner), so I warped back to the toll
bench in City of Tears and prepared to get my third nail upgrade.</p>`;
});
var quick_update_on_deployment = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Quick_update_on_deployment
});
const Some_thoughts_on_unicorns = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h3 id="${"some-thoughts-on-unicorns"}"><a href="${"#some-thoughts-on-unicorns"}">Some Thoughts on Unicorns</a></h3>
<p>As far as I can tell, all developers have a notion of getting ridiculously wealthy by starting the next big thing -
Facebook, Instagram, Twitter, etc. These have gone by various names, but I am going to continue referring to them as \u2019
Unicorns\u2019 as they are extremely rare.</p>
<p>That said, I think we all walk around with ideas that every now and again grab us as a potential unicorn. I do not have
these sorts of ideas often, but when I do I run them past a colleague of mine who is particularly good at shooting them
down. I have come up with some ideas that he has not immediately shot down, but have not struck me as the unicorn - just
a different business I could get into.</p>
<h3 id="${"horses"}"><a href="${"#horses"}">Horses</a></h3>
<p>I am starting to think what I should really be searching for is actually simpler: a tech business that just does
something simple really well. I remember a million years ago learning about email service providers and thinking \u201Cwhy
would anyone pay for that?\u201D Today, no respectable online business operates without an ESP.</p>
<p>So, I started trying to come up with simple services that I could provide. Something-as-a-service is not new; in fact,
it seems that I am probably late to the goldrush. That said, there are so many fields that it seems impossible that
there does not exist some untapped vein. The problem, as I see it, is identifying the demand.</p>`;
});
var some_thoughts_on_unicorns = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Some_thoughts_on_unicorns
});
const Minor_pivot_to_content = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"minor-pivot-to-content"}"><a href="${"#minor-pivot-to-content"}">Minor Pivot to Content</a></h1>
<h3 id="${"been-a-while"}"><a href="${"#been-a-while"}">Been a While!</a></h3>
<p>So, one and a half years ago I stated that I was going to try writing more every day, and then I stopped writing for a
year and a half. Creating content is hard, especially when this is meant to be a blog about technical stuff and I am not
creating there, either. So, in an effort to try and get back into writing (again), I am going to open up the context of
the content I write here. It will largely be whatever I feel like talking about - tech, games, work stuff, etc.</p>
<h3 id="${"hollow-knight"}"><a href="${"#hollow-knight"}">Hollow Knight</a></h3>
<p>Hollow Knight is probably the best Metroidvania games I have every played in my life. The controls are crisp, the story
is imaginative and deeply engrossing, the music is absolutely stellar and second to none (I often have the OST playing
in my headset while I work), and the game is just flat out fun.</p>
<h4 id="${"vanilla-playthroughs"}"><a href="${"#vanilla-playthroughs"}">Vanilla Playthroughs</a></h4>
<p>I first ran Hollowknight determined to get a 112% run completed (which is the Dream No More ending with all major items
collected). It took me a little over 20 hours to do on my initial save, but a lot of that time was eaten up by playing
on my underpowered laptop (lag, minor occasional freezes).</p>
<p>After I beat it once, I decided to go for all achievements because it sounded fun. I had most of them already, and a new
save would let me get the alternate achievements (like not <em>spoiler</em>ing Zote and the Nailsmith). Eventually, I got them
all except Pantheon of Hallownest, which requires defeating Absolute Radiance after a brutal gauntlet boss-rush. I
reached AbsRads several times, and practiced her a lot, but never could line it up just right. Oh well\u2026 99%
achievements. If I dedicated a few hours every day, I am certain I could do it, but it just is not much fun to grind.</p>
<h4 id="${"item-randomizer"}"><a href="${"#item-randomizer"}">Item Randomizer</a></h4>
<p>Instead of grinding, I turned to mods. I installed the item randomizer mod and started playing any% and it has been
amazingly fun. Since running it the first few times, I have elected to disable rancid eggs, and also only put on most of
the required skips (no dark rooms\u2026 these are just dumb for the sake of being dumb).</p>
<p>My most recent save file I started this morning. It seems particularly cursed (even though cursed is not enabled). I
always tend to fight Brooding Mawlek first because he gives an item and is fairly simple to do with base nail and no
spells/charms (in my case. Sometimes, you have a spell or charm for BM, but it is random).</p>
<p><strong>First Item</strong>: A Dreamer</p>
<p>\u2026 great, now I have to deal with Infected Crossroads with the upgraded baddies with no spells/items/charms. Next, I
elected to beat Gruzmother (since the way to Crossroads stag was blocked because it is Infected Crossroads). I get Sly
and head up the Upper Tram route to get to Crossroads stag. Collect both the grubs on the way, and unlock upper
Crossroads.</p>
<p>The Crossroads Stag item was the Tram Pass, which is not the worst early-game item in the world. It opens up Resting
Grounds, and potentially opens up the Hive when I can get into the Ancient Basin. From here, I go to fight the False
Knight, who dropped a White Fragment. However, his chest gave me Monarch Wings, so I am feeling much less cursed, now.</p>
<p>Here, I had to enable no-clip to transition into the Ancestral Mound because my first item was a dreamer\u2026 and
collecting a Dreamer causes the Infected Crossroads, and that blocks off the Ancestral Mound\u2026 with the
locked-from-the-inside-door. I could not tell, but the switch was unlocked when I went in there, so <em>maybe</em> the game
will not allow the hard-locking of the area and simply unlocks it. Either way, the first item here was Isma\u2019s Tear,
which opens up a lot of the map, but not a ton since I still do not have a spell or Mantis Claw.</p>
<p>So, I decide to head down into Fog Canyon and get into Queen\u2019s Station. The item I picked up was Mothwing Cloak. Nice!
Now, I have a dreamer and a few key mobility items to get around the map.</p>
<h4 id="${"next-session"}"><a href="${"#next-session"}">Next Session</a></h4>
<p>I still need to go back and check out what Sly and Salubra have to offer. Ther is always a chance that one of them will
give me my first spell, and if so that\u2019s a 2/3 chance to have one to get through Greater Baldurs, which opens up even
more of the map. Otherwise, I can continue from Queen\u2019s Station pretty effectively with just dash, but double-jump will
allow me to do the back-door skip for the item-at-Mantis-Claw, which is nice. Basically, everything in Mantis Village
assumes that you have dash only, and getting 4 items there is easy.</p>`;
});
var minor_pivot_to_content = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Minor_pivot_to_content
});
const Rebuilt_the_blog_again = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"rebuilt-the-blog-again"}"><a href="${"#rebuilt-the-blog-again"}">Rebuilt the Blog Again</a></h1>
<p>As the title suggests, and as any observer can tell, I have rebuilt this blog\u2026 again.</p>
<p>I tend to do this every year or two just to play with a new technologies. My first rewrite of my blog was in vanilla
React via <code>create-react-app</code>, and I tried to use a few external libraries as possible. I do this mainly to learn the
inner workings of a framework as well as to learn the various \u201Cisms\u201D that come with a given framework choice. To date, I
have been very happy with React and considere it my framework preference.</p>
<p>However, vanilla React requires one to build a lot of custom components. Components which I do not want to build. I hate
building styles and templates, and I consider rebuilding, for example, a markdown processor to be a waste of my time. It
has been done countless times, and I would be adding nothing new to that space.</p>
<p>So, my original React blog was very simple - a back-end which would authenticate me so that I could write and edit blog
posts, and a front-end React app to consume that data. Very simple, very uncomplicated, and yet still much too
compicated for a simple blog. I wasn\u2019t aiming for Wordpress - I just like to write sometimes.</p>
<p>I came across <code>Gatsby</code> by way of Dan Abramov and Ryan Florence on Twitter, so I thought that it would be the next thing
I tried when rewriting the blog. I have spent a collective of around 8 hours rebuilding the site in Gatsby, and I have
to confess - it is everything I want.</p>
<p>My blog consists of a React application, which Gatsby \u2018compiles\u2019 into static html/css/js, which can be hosted somewhere
for static service. I write these posts in Markdown, they are each individual files, I do not have to have a back-end,
or credentials, or a database. These are just flat files that get transpiled into styled html.</p>
<p>This is the dream.</p>`;
});
var rebuilt_the_blog_again = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Rebuilt_the_blog_again
});
const Just_had_a_weird_idea = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"just-had-a-weird-idea"}"><a href="${"#just-had-a-weird-idea"}">Just Had a Weird Idea</a></h1>
<p>This blog is built on GatsbyJS, which is a static site generator. The underlying blog posts that I write are just
markdown files that sit in a <code>posts</code> directory in the Github repository for this blog. The way the site is built and
deployed is really rather straight-forward:</p>
<ol><li>I write my new blog post (like this one)</li>
<li>I run git add/commit/push</li>
<li>I run <code>npm run build</code> (which builds the static site)</li>
<li>I run <code>npm run deploy</code> (which deploys to S3)</li></ol>
<p>That process is straight-forward enough for me that I had not considered continuous deployment options. That is until I
visited one of my favorite blogs <a href="${"http://dodgersdigest.com/"}" rel="${"nofollow"}">DodgersDigest</a>. One interesting thing about successful
blogs is that they often have multiple contributors, and DoDi is no different. Now, I am not at the scale to
necessitate (nor have the need for) multiple writers on this blog. I do not think I wrote a blog post in 2018, for
example. However, with the Gatsby setup I have no back-end and therefore no user authentication etc.</p>
<p>So, my weird idea is to leverage Github to do that for me. I am imagining changing my process to the following:</p>
<ol><li>I write my new blog post</li>
<li>I run git add/commit/push</li></ol>
<p><del>Then have my integrated deployment solution react on Github\u2019s webhooks to notify that <code>master</code> has been updated, so
then it will:</del></p>
<ol><li><del>Run <code>npm run build</code></del></li>
<li><del>Run <code>npm run deploy</code></del></li></ol>
<p>I did this; <code>git push origin master</code> now deploys the build to S3 automatically via Travis-CI.</p>
<p>What is interesting about this is that I could actively allow other writers simply by accepting pull requests. See, each
of these posts are just markdown after some simple metadata markup:</p>
<pre class="${"language-undefined"}">${`<code class="language-undefined">---
path: &quot;/just-had-a-weird-idea&quot;
date: &quot;2019-05-01&quot;
title: &quot;Just Had a Weird Idea&quot;
---

This blog is built on GatsbyJS, which is a static site generator...</code>`}</pre>
<p><del>I could very easily build in the notion of an <code>author</code> piece of metadata and start accepting pull requests from
anyone. This is interesting enough that I think I will probably do it.</del></p>
<p>Okay, I did that:</p>
<pre class="${"language-undefined"}">${`<code class="language-undefined">---
path: &quot;/just-had-a-weird-idea&quot;
date: &quot;2019-05-01&quot;
title: &quot;Just Had a Weird Idea&quot;
author: &quot;kain&quot;
---

This blog is built on GatsbyJS, which is a static site generator...</code>`}</pre>
<p>Now, it shows the author name just under the post title (added some <em>sick</em> FontAwesome icons, as well).</p>`;
});
var just_had_a_weird_idea = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Just_had_a_weird_idea
});
const Wrapping_up_a_fun_one = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${$$result.head += `${$$result.title = `<title>Wrapping Up a Fun One | TeamClerks</title>`, ""}`, ""}


<h1 id="${"wrapping-up-a-fun-one"}"><a href="${"#wrapping-up-a-fun-one"}">Wrapping Up a Fun One</a></h1>
<h3 id="${"picking-up"}"><a href="${"#picking-up"}">Picking Up\u2026</a></h3>
<p>The only thing left to do was the small one-two item runs to try and find the last dreamer
(Monomon, but you know\u2026 it does not matter which). So, I ventured into the Waterways to collect
the Flukenest item and the Godtuner item. One was the Grimchild, so I went back to Dirtmouth to
fight Grimm and collect another item (garbage).</p>
<p>Then, I started doing all the minor offshoots I could think of. The first one was to go back to the
Abyss now that I had Shriek, but I loaded up Jonie\u2019s Blessing, Core, and Unbreakable Heart to get
into the blue cavern first. At the Arcane Egg item I picked up Monomon, so I skipped the rest and
benchwarped back to Dirtmouth and equipped my fighting charms and traveled to the Black Egg to end
the Hollow Knight.</p>
<p>All together, a very fun run. I liked getting so many progression items early as it made the world
open to the point of having seemingly limitless possibilities. The run I did prior was so cursed,
by comparison, that it was nice change of pace.</p>
<h3 id="${"new-run"}"><a href="${"#new-run"}">New Run!</a></h3>
<p>I still had some time before work, so I picked up a new save. This time, am I going to do a blind
check against the spoiler log to ensure I am getting the items correctly here.</p>
<p>For anyone looking to give it a try, the seed is <code>595261494</code>.</p>
<p>Fury of the Fallen item was Desolate Dive, which is always a fun one since it can act like Vengeful
Spirit and open up Greater Bauldar blocks to get into Greenpath and the Bauldar\u2019s Charm item. My
next stop is almost always, and it is definitely when I get an early spell, the Brooding Mawlek.
Desolate Dive makes the fight trivial - slap twice, back up to avoid the melee, come back and slap
twice. If he does the big spit, pogo 2-3 times then DDive him. Rinse and repeat ezclap.
Unfortunately, it was just a Hallownest Seal. From there, I go pick up the Mask Shard item via the
Vengefly skip\u2026 and it was Monomon. So, from here the Crossroads will be infected, which means
that I have to go to Gruzmother and collect Sly before heading up to the Stag station.</p>
<p>The Stag item was another Hallownest Seal. I headed back to Dirtmouth to collect the item at that
Stag and it was a Pale Ore - very nice early-game item since historically I have not had the luxury
of Nail upgrades (last run was special) early. False Knight was a Simple Key, and his chest was a
Charm Notch\u2026 but I do not have any charms yet.</p>
<p>At the Ancestral Mound, I got the Tram Pass and another Pale Ore. If I can find another Pale Ore on
the way to City of Tears, I can actually get three Nail upgrades once I am there, which is
basically cheat-mode before Soul Sanctum or Watcher\u2019s Spire. I stopped playing here\u2026 it was time
for work.</p>
<h3 id="${"next-time"}"><a href="${"#next-time"}">Next Time</a></h3>
<p>I, actually, have a few ways I can go, at the moment. I need to double-back to Dirtmouth at some
point to see what Sly has, but I can go Greenpath or Resting Grounds since I have Desolate Dive and
the Tram Pass. Greenpath has a <em>lot</em> of items in it, but sort of expects that you have Mouthwing
Cloak for several of them (Thorns of Agony item, for example). Resting Grounds with Desolate Dive
is pretty easily four items (maybe five\u2026 I can\u2019t remember how many are accessible in the graves
before picking up Monarch Wings or Mantis Claw). I will probably do Dirtmouth, then Resting
Grounds, then Greenpath and figure it out from there.</p>
<p>Cheers!</p>`;
});
var wrapping_up_a_fun_one = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Wrapping_up_a_fun_one
});
const Updates_and_filesize = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"updates-and-filesize"}"><a href="${"#updates-and-filesize"}">Updates and Filesize</a></h1>
<p>I deployed the latest version of my blog software this morning, and I improved a few simple things:</p>
<ul><li>Moved around some of the logged-in links (none of you will see these, yet) for a better layout</li>
<li>Added some preferences functionality (none of you will see this, yet)</li>
<li>Added an <a href="${"/about"}">About</a> page which has a very short description of what this site is</li>
<li>Added better styling for blockquote blocks</li>
<li>Enabled <code>gzip</code> compression in <code>nginx</code></li></ul>
<p>On that last note, I want to bring up some things I find interesting. First, I have been a long-standing opponent of
SPAs (single-page applications) for a bevy of reasons, but a chief complaint had always been filesize. My tiny blog
React app after concatenation and minifaction (common JS production-grade processing) landed at a hefty ~775KB. I have
high resolution images hosted at less volume than that.</p>
<p>So, my natural inclination is to enable <code>gzip</code> compression on the server, which I did, and that got the filesize down
to ~200KB. While that sounds great (200 is much less than 775), when looking at a broader context it still comes up shy
of great. <code>jQuery</code>, for instance, is a commonly used library and is often lamented as \u201Ctoo big\u201D (as well as largely
unnecessary now), but measures up at ~35KB <strong>before</strong> compression, and likely that number gets down to the single-digit
range after.</p>
<p>\u201CApples and Oranges!\u201D many of you will shout! \u201CYou are comparing a utility library to a fully fledged single page
application\u2019s controller code [and entire framework codebase as well]\u201D</p>
<p>That is fair.</p>
<p>Maybe 200KB after compression is reasonable for a blog of this size built on ReactJS. My primary concern is not the
current size, but that of the size in the future.</p>
<p>Today, the only JavaScript loaded is 249.26KB compressed (774.73KB uncompressed). The next time I build in a new module
or do a new release, I am going to note what the size of the file becomes. My hope, and maybe this is naive, is that
ReactJS is <strong>most</strong> of that bloat, but I get to add tons of components relatively cheaply and that a much larger
production application would avoid overly long waiting periods for the transmission of code.</p>
<p><strong>EDIT</strong></p>
<p>I just added a bunch of title stuff and created a base class from which all <code>Page</code> components extend, and now the build
is 252.55KB compressed (787.18 uncompressed). The file I added was about 2KB in size prior to transpiling, so there is
a chance that transpilation blew it up to roughly 8KB in size, but there were other changes as well\u2026 so it is hard to
say for sure.</p>
<p>Call me cautiously optimistic at this point!</p>`;
});
var updates_and_filesize = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Updates_and_filesize
});
const Deployed_the_blog = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"deployed-the-blog"}"><a href="${"#deployed-the-blog"}">Deployed the Blog</a></h1>
<p>Because Gatsby builds into a fully static site, my needs have changed. I no longer need an actual running instance to
serve the site anymore. Instead, I elected to serve my site directly via <code>S3</code>.</p>
<p>However, I still wanted to support SSL/TLS, which meant that I had to use CloudFront and a certificate issued through
AWS as well. That turned into a big hassle to move the TeamClerks.net domain control from
my <a href="${"http://beyonddomains.net"}" rel="${"nofollow"}">previous provider</a>
to <a href="${"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/Welcome.html"}" rel="${"nofollow"}">Route53</a>.</p>
<p>Next, I had to set up a certificate (and for [reasons] it has to be on N. Virginia to work with CloudFront\u2026 something
that took me a while to figure out). Next, I had to set up CloudFront to use that certificate and point to the S3 bucket
as its source, but not in the way that CloudFront recommends (another thing that took me a while; for [reasons] you have
to specify the S3 public URL rather than naming the bucket for proper handling in the app like 300/301/404/etc).</p>
<p>Okay, well\u2026 we are back up on TeamClerks.net with the latest Gatsby build and deployed fully in AWS, except now I am
saving \\$11/mo - woo!</p>`;
});
var deployed_the_blog = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Deployed_the_blog
});
const Not_much_going_on = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"not-much-going-on"}"><a href="${"#not-much-going-on"}">Not Much Going on\u2026</a></h1>
<p>I have not had a lot of time to work on my blog in the last few days, and I have not written much since getting Let\u2019s
Encrypt running (without touching it since initial install, still going strong ^_^); so, I thought I would post
something and change that.</p>
<p>Firstly, I am working on getting a <code>preferences</code> thing set up so that I can change simple used-everywhere stuff
(signature and password change for now, but eventually as I add more and more stuff, this page is seems pretty logical).
In building this out, I noticed that there are a lot of <code>Reactisms</code> to which I am becoming more accustomed.</p>
<p>For a little background, React requires each component to keep track of state using a member variable (called <code>state</code>\u2026
shocker), and instead of adding listeners to a form, one is supposed to use <code>onChange</code> function pointers on the elements
themselves. Below is an example of a very simple component:</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">_</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        foo<span class="token operator">:</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">// This is required for binding &#96;this&#96; correctly... a post for another day</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>fooChanged <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fooChanged</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

    <span class="token function">fooChanged</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>foo<span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
                <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span>
                <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fooChanged<span class="token punctuation">&#125;</span></span>
            <span class="token punctuation">/></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>This does not seem so complicated, but one can imagine having several inputs on a <code>form</code> (though, we do not actually
require forms anymore\u2026 a post for a different day) causing headaches from all these functions having to be created for
simply wanting to update state. So, instead we can simplify by creating an intuitive mapping:</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">_</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        foo<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
        bar<span class="token operator">:</span> <span class="token string">''</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>inputChanged<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inputChanged</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

    <span class="token function">inputChanged</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> newState <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        newState<span class="token punctuation">[</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token comment">// This will still evaluate to &#96;&#123;foo: event.target.value&#125;&#96;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
                    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span>
                    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span>
                    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputChanged<span class="token punctuation">&#125;</span></span>
                <span class="token punctuation">/></span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>
                    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span>
                    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>bar<span class="token punctuation">&#125;</span></span>
                    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputChanged<span class="token punctuation">&#125;</span></span>
                <span class="token punctuation">/></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>There, now we have an <code>onChange</code> function that works for all the inputs we have, provided we ensure that each has a
<code>name</code> attribute that corresponds to the same name of the state holding the value for that input.</p>
<p>I have not played with this enough, but I suspect that I can abstract out the <code>inputChanged</code> function into an abstract
class (well\u2026 it is JavaScript, so it will just be a class that one should treat as abstract).</p>`;
});
var not_much_going_on = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Not_much_going_on
});
const Styled_components = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"styled-components"}"><a href="${"#styled-components"}">Styled Components</a></h1>
<p>I am in the midst of writing a React best practices document for work and I came upon the notion of styling in React
applications both generally and specifically for components. I tend to run these ideas by one of my colleagues (who,
incidentally, argued with me until I tried React more in earnest which led to me falling in love with it, so I tend to
trust his React instincts). So, the conversation goes like this:</p>
<p>I come into work in the morning and decide to DM him.</p>
<p>Me:</p>
<blockquote><p>Let\u2019s argue.</p></blockquote>
<p>Him:</p>
<blockquote><p>I\u2019m ready.</p></blockquote>
<p>The argument ensues and is a heated one. Ultimately, we take our opinions to our greater chat forum in the form of a
poll to see a general concensus. Evenly split 50-50; I was surprised. In essence, we both like using styled-components,
but in different ways. Following is a contrived example of his preference:</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ExampleView</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Some stuff here</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> Wrapper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
  padding: 20px;

  .title &#123;
    padding: 5px;
    width: 30%;
    height: 50px;
    border: 1px solid purple;
  &#125;
  .body &#123;
    padding: 5px;
    width: 30%;
    height: 50px;
    border: 1px solid purple;
  &#125;
</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span></code>`}</pre>
<p>I can see the appeal here; you get a lot:</p>
<ul><li>Simple one-stop CSS</li>
<li>Encapsulation</li>
<li>Easily understood HTML</li>
<li>Theme-able wrapper element</li></ul>
<p>It is good and I would use this model, but I tend to lean more into the styled-components.</p>
<p>See, originally I disliked JSX. After playing with it a bunch and understanding how React composes up while the data
flows down, I decided that JSX was great. Moreover, it made understanding the differences between <code>&lt;div&gt;</code> and <code>&lt;Div&gt;</code>
simple enough: there is no difference; I could make a component called <code>&lt;Div&gt;</code> that acts exactly the way <code>&lt;div&gt;</code> does
and none would be the wiser.</p>
<p>Something really simple (that is obviously not 100% covering what <code>&lt;div&gt;</code> does but illustrates my point):</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Div</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>children<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>This is everything I have ever wanted in HTML - the ability to be more declarative than the built-in elements (<code>&lt;div&gt;</code>
, <code>&lt;header&gt;</code>, etc). Classnames get me closer by being able to do things like <code>&lt;header className=&quot;siteHeader&quot;&gt;</code>. But
styled-components, by virtue of turning everything into a high-order component (in the same way my <code>&lt;Div&gt;</code> did), affords
me the luxury of declaring my elements semantically. Instead of <code>&lt;header className=&quot;siteHeader&quot;&gt;</code>, I can have <code>&lt;Header&gt;</code>
. So, from the same contrived example as before, we have my version:</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ExampleView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Body</span></span><span class="token punctuation">></span></span><span class="token plain-text">Some stuff here</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Body</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> Wrapper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
  padding: 20px;
</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Title <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
  padding: 5px;
  width: 30%;
  height: 50px;
  border: 1px solid purple;
</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Body
styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">
  padding: 5px;
  width: 30%;
  height: 50px;
  border: 1px solid purple;
</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">;</span></code>`}</pre>
<p>To me, this is the best. As a developer, I do not actually care what the underlying implementation is for my <code>&lt;Title&gt;</code>
component; all I care is that I can read that and say \u201Coh, that\u2019s the title.\u201D</p>
<p>I concede that there may be times to use either/both; for example, when you need a property to affect the style of many
components. The first way affords the developer the luxury of passing the prop to the parent a
la <code>&lt;Wrapper normal={props.normal}&gt;</code> and the style can consume that prop for all styles whereas my preference would
require either of:</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span> <span class="token attr-name">normal</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>normal<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Title</span></span> <span class="token attr-name">normal</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>normal<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Body</span></span> <span class="token attr-name">normal</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>normal<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Some stuff here</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Body</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">></span></span></code>`}</pre>
<p>which has the potential for a lot of repetition or</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrapper</span></span> <span class="token attr-name">normal</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>normal<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Title</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Hello, World!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Title</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Body</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">Some stuff here</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Body</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrapper</span></span><span class="token punctuation">></span></span></code>`}</pre>
<p>which somewhat defeats the point, but would allow custom selectors in the parent where the prop is solely consumed.</p>`;
});
var styled_components = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Styled_components
});
const We_secure__baby = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"we-secure-baby"}"><a href="${"#we-secure-baby"}">We Secure, Baby!</a></h1>
<p>I played with <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">Let\u2019s Encrypt</a> and eventually got it working, as well as all the correct
redirects and whatnot. I am happy to say that my <a href="${"https://letsencrypt.org/"}" rel="${"nofollow"}">SSLLabs score</a> is a solid <strong>A</strong>. This was
actually quite a bit easier than I had originally anticipated. The <a href="${"https://certbot.eff.org/"}" rel="${"nofollow"}">CertBot</a> application
provided by EFF was extremely intuitive, and after setting up the certificates (and a <code>cron</code> job to acquire new
certificates twice a day\u2026 which seems aggressive, but it was recommended) the <code>nginx</code> configuration was relatively
straight-forward.</p>
<p>Now that the bookkeeping (one of my favorite words in the English language as it has three consecutive double-letters)
is done, I can focus on improving some of the functionality and aesthetics of this lil\u2019 blog. I think my next item in
the <code>TODO</code> list is the create a more robust user profile set of settings (no registration yet, but it would be nice to
change some of my things a bit).</p>`;
});
var we_secure__baby_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": We_secure__baby
});
const Day_one_failure = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"day-one-failure"}"><a href="${"#day-one-failure"}">Day One Failure</a></h1>
<p>Well, I did not write anything the last few days after proclaiming I would\u2026 not a good start.</p>
<h3 id="${"gdpr"}"><a href="${"#gdpr"}">GDPR</a></h3>
<p>GDPR is dumb. Honestly, it is extremely dumb. It is intended as a mechanism to enforce that large online companies
respect the privacy of their users, but it just is not necessary.</p>
<p>The working example goes like this - I use Facebook and I <strong>wrongly</strong> expect that Facebook is treating <strong>my</strong> data as
private, but a news article comes out and <strong>righly</strong> points out that Facebook exists to make money and they have been
selling my data all along. GDPR is a set of regulations aimed at making that process more transparent - if Facebook is
going to sell my data, I need to agree to those terms and they must provide mechanisms for me to remove my data from
their system upon request.</p>
<p>Now, I am not a libertarian, but I am in favor of the free markets deciding things like this in this one particular
case. Users are opting in to using Facebook. We are not talking about service providers of necessary services which hold
monopoly share of the market (think water, electricity, ISPs, etc). If your electricity provider was selling your
private information, then that would be a problem because there are no other options - if you live in Southern
California, you probably have SCE providing you electricity and you have <strong>zero</strong> alternatives. However, if you are
using Facebook and they are sharing your private data, you can delete all your private data from Facebook and move on to
a competitor\u2019s service. You do not like that Google sells our your browsing information? Use DuckDuckGo and Firefox.
Find a competitor who acts more aligned with your wishes. This is how the free market works.</p>
<p>GDPR puts a lot of undue strain on startups. We have been discussing this a lot at my job, but the gist is that
estimating the amount of effort that is required to implementing GDPR requirements is largely unknown. It will likely be
some percentage of the overall work, but that amount seems extremely high for most startups.</p>
<p>If you are a startup and you have exactly a half-million dollars on hand, but you have to devote 1/5 of that to
supporting GDPR instead of the product you are trying to build, then that is a problem. Additionally, I work at a firm
that does software development by contract - trying to explain to the CEO of a startup that their budget needs to be X%
larger than they planned in order to support GDPR (something which will never show value to <strong>them</strong>) is impossible.</p>
<p>CEO: \u201COkay, what do we get by supporting GDPR?\u201D</p>
<p>Me: \u201CYou gain the ability to work with EU users.\u201D</p>
<p>CEO: \u201CBut functionally - what is it?\u201D</p>
<p>Me: \u201CIt gives your users the ability to completely delete their data from your systems; it makes it legally impossible
for you to sell their data without users agreeing to it; it makes you liable for data breaches under good faith; and it
makes you hire a DPO to handle compliance monitoring and reporting.\u201D</p>
<p>CEO: \u201C\u2026 I don\u2019t want any of that.\u201D</p>
<p>Me: \u201CI get it, but if you want to do business in the EU, this is the law.\u201D</p>
<p>CEO: \u201C\u2026 We\u2019re just a startup; I don\u2019t even know if the doors will be open next year\u2026 why would I agree to any of
this?\u201D</p>
<p>Me: \u201CYou wouldn\u2019t\u2026 and California is enacting basically the same thing, soon.\u201D</p>
<p>Dumb.</p>
<h3 id="${"users-are-stupid"}"><a href="${"#users-are-stupid"}">Users Are Stupid</a></h3>
<p>The reason that GDPR was adopted is because users are stupid. A majority of users opt into systems either not fully
understanding the ramifications or assuming, incorrectly, that the company had their best interests at heart with regard
to privacy.</p>
<p>Essentially, if a user created a Facebook account under the impression that their data would remain private, they are
naive or stupid.</p>
<blockquote><p>If you are not paying for it, you are not the customer; you are the product being sold.</p></blockquote>
<p>In the case of Facebook, users should sign-up with the understanding that anything they contribute to the site will be
sold and/or public information. This understanding should shape how users use these systems, but it does not for a vast
number of users.</p>
<h3 id="${"a-stupid-solution-for-stupidity"}"><a href="${"#a-stupid-solution-for-stupidity"}">A Stupid Solution for Stupidity</a></h3>
<p>In the end, nothing has changed. GDPR puts a financial burden on the service provider and users are no safer than they
were before - Facebook still sells your data, but now you have a very shiny \u201Cdelete all data\u201D button.</p>
<p>The EU took the problem of users shooting themselves in the foot and made a law that forced all gun makers to build
systems into their guns that disabled them from firing straight down\u2026 but users are more than happy to pick up their
foot and fire.</p>`;
});
var day_one_failure = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Day_one_failure
});
const Web_frameworks = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"web-frameworks"}"><a href="${"#web-frameworks"}">Web Frameworks</a></h1>
<h2 id="${"preface"}"><a href="${"#preface"}">Preface</a></h2>
<p>When coming up with topics I often find that I have a big pool of them in my mind, and often the notion of sorting them
or deciding about which one to write <em>today</em> is overwhelming.</p>
<p>My advice is to simply order them and fix the ordering if/when you need to. Just do it.</p>
<h2 id="${"a-brief-history"}"><a href="${"#a-brief-history"}">A Brief History</a></h2>
<p>Looking back, my clients had simple requirements which would always yield a \u201Csimple\u201D webapp. In these cases, the term \u201D
simple\u201D means that it was uncomplicated - each page had <strong>a</strong> JavaScript and I built out functionality very manually.
These were days of jQuery helping with DOM selectors; it was boring, fine, but obviously going to improve. These pages
were server-side rendered (first JSP, then Mustache) and rarely required AJAX - I would just submit forms and cookies
took care of the rest. This period lasted several years, and the hardest part of that job was getting the webapp to work
right in IE6.</p>
<p>I started getting more serious about true headless applications and client-side applications at some point, and looking
around to see what was available at the time led me to pick a framework that most aligned with my experience - I wanted
something simple: a page has a script and some styles. Just about every framework at the time did not align with this,
so I built my own. It was a simple Handlebars template under the hood, and some JavaScript to scaffold the required
components together. It was a dumb idea that worked better than it should have. Too much of the logic was in the
framework and the templates, and often boiled down to the page\u2019s JavaScript did not do much but alter the DOM and do
query selectors. It felt weird and foreign at the time, but better than any of the other frameworks.</p>
<p>Later, I tried out Angular and hated it. The magic of wiring up attributes on html elements and having it affect/be
affected by scripts by magic felt gross. I tried KnockoutJS, which was better in that it felt more like Handlebars, but
it still had too many required files for a simple single component - I recall trying to make a simple poker webapp to
test it and every <strong>single</strong> component had a minimum of three JavaScript files required to let the application use it.</p>
<p>I tried <a href="${"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"}" rel="${"nofollow"}">HTML Web Components </a> but it
was more of the same - why do I have do jump through so many hoops just to get to use the component that I built? I have
to create it, then \u201Cdefine\u201D it, then I get to use it in the HTML? Absurd.</p>
<h2 id="${"enter-react"}"><a href="${"#enter-react"}">Enter React</a></h2>
<p>I hated React.</p>
<p>I loathed React.</p>
<p>I loved React.</p>
<p>React started out difficult because it forced me to do things differently. However, React was the first time a framework
gave me something I wanted - my component is self-encapsulated, exported, and consumable by others. React allows me to
make:</p>
<pre class="${"language-jsx"}">${`<code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Foo</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`}</pre>
<p>and use a <code>&lt;Foo /&gt;</code> in markup after importing it. It is simple and conceptionally aligned with how my brain works. This
is good.</p>
<p>I dispised React, at first, mainly because of the life-cycle functions. It felt like a ton of domain knowledge was
required to fully utilize what is otherwise a simple component model. When hooks were introduced, I was in love - I got
to get rid of my life-cycle knowledge and work in pure functions and specifying side-effects as a function of the
component. It was glorious and I sang Hooks\u2019 praises to anyone who would listen. I gave tech talks, helped noobs,
answered stackoverflow querstions\u2026 you name it.</p>
<h2 id="${"enter-the-winner"}"><a href="${"#enter-the-winner"}">Enter the Winner</a></h2>
<p>One of my bosses, who is extremely hard on React and very snarky, linked a blog post by Rich Harris and his pet
framework - <a href="${"https://svelte.dev/"}" rel="${"nofollow"}">Svelte</a>. In this blog post, it pointed out several design decisions made by the React
team (the shadow-DOM, most notably) that he believes is a mistake.</p>
<p>To prove my boss wrong, I decided to do what I always do with a new technology - I rewrote my blog (this one). Spoiler
alert: this blog is still (as of August 21, 2019) still a Gatsby project. As I did this exercise, I found a few things:</p>
<ol><li>I wrote less code per component</li>
<li>I required fewer components</li>
<li>The logic was more direct and less based on React-isms</li></ol>
<p>Okay, so Gatsby gets me a lot of stuff \u201Cfor free\u201D presently, so I elected to NOT redeploy my blog as a Svelte app, even
though it had a lot going for it. Instead, I started a new project\u2026 again. Whenever I am using a new technology and
want to compare apples to apples, I do the same projects because I know what the pitfalls and hangups are going to be at
the outset. About a year ago, I gave a talk about React Hooks in my office, and what I built was Chess. It was just a
board that allowed dragging and dropping of pieces and used a library to enforce the rules - very simple.</p>
<p>The first application I built was the React with class components version. Then I built the React with Hooks version. I
compared the two, noted areas where one was better than the other and for what reasons (read: it was hooks - hooks was
better and for all the reasons), and performed a tech talk.</p>
<p>SOOOOOO, I started a new Svelte app and built the Chess app again. The first thing I noticed was how poisoned my
thinking had become; the React-isms that were second nature to me were actively combating my old way of thinking -
manipulating the DOM, dealing with events, etc. Once I got over that, the rewrite went very quickly; again, it was less
code than either React experiment, and the code was MUCH easier to reason about.</p>
<p>I ended up building a Svelte app to act as a slide-show presentation for the next tech talk (on Svelte, obviously), and
I just wanted to share my biggest take-away. Aside from the fact that there is no shadow-DOM (which means the app \u2019
reacts\u2019 faster with less memory consumed), and there is less code, and the code I do write is easier to understand\u2026
aside from all that. At the end of the day, the Chess app in React was minified, uglified, and gzipped down to 42KB. I
expected this - React even without libraries - becomes a bloated bundle because the framework is massive and the code
you write explodes. However, Svelte is compiled down to HTML/JS; so, the same Chess app was minified, uglified, and
gzipped down to 9KB.</p>
<p>I have seen some React apps get to half-a-MB or more by the time they get deployed to production. Svelte gives me
everything I want in writing components that make up an application, AND it becomes a tenable production bundle that
does not cause fear over TTL.</p>`;
});
var web_frameworks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Web_frameworks
});
const Hello__world = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"hello-world"}"><a href="${"#hello-world"}">Hello, World!</a></h1>
<p>This is the first post of my blog.</p>
<p>I built this blog using <code>ReactJS</code> as my front-end and <code>Gemini</code> as my back-end. Technically, <code>nginx</code> is serving all the
requests though <code>api.teamclerks.net</code> is proxied to a localhost route that is behind the firewall to hit the <code>Resin</code>
instance servicing the <code>Gemini</code> application.</p>
<p>As you can see, this site is extremely unfurnished, and I hope to improve that situation moving forward. For now, I am
content having this set up as such, and I will begin working on transitioning the entire site over to <code>HTTPS</code> via
<code>Let&#39;s Encrypt</code> tomorrow.</p>`;
});
var hello__world_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Hello__world
});
const Dark_theme = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `<h1 id="${"dark-theme"}"><a href="${"#dark-theme"}">Dark Theme</a></h1>
<p>I am not a designer.</p>
<p>My ability to be creative when it comes to colors/themes/etc is next to none. I use the tried and true method of
stealing from designers. Go find a site that has some aspect you like, open the inspector, and straight up steal it. I
realize that I am taking someone\u2019s hard work that they paid for, be it time or money or both, and reaping the fruit of
the labors for myself. I just do not really care.</p>
<p>I will probably tweak this one more; the sandy color for the links is interesting, but not sure I am in love with it.</p>`;
});
var dark_theme = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Dark_theme
});
export {init, render};
