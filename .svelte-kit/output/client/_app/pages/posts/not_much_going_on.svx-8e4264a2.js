import{S as n,i as a,s,e as t,t as p,k as o,c as e,a as c,g as u,d as i,n as l,b as r,f as k,D as h,E as d}from"../../chunks/vendor-2299f040.js";function g(n){let a,s,g,f,m,v,w,y,b,E,C,I,x,j,q,S,D,O,P,T,R,F,L,M,_,H,B,G,J,N,A,z,K,Q,U,V,W,X,Y,Z,$,nn,an,sn,tn,pn,on,en,cn;return{c(){a=t("h1"),s=t("a"),g=p("Not Much Going on…"),f=o(),m=t("p"),v=p("I have not had a lot of time to work on my blog in the last few days, and I have not written much since getting Let’s\nEncrypt running (without touching it since initial install, still going strong ^_^); so, I thought I would post\nsomething and change that."),w=o(),y=t("p"),b=p("Firstly, I am working on getting a "),E=t("code"),C=p("preferences"),I=p(" thing set up so that I can change simple used-everywhere stuff\n(signature and password change for now, but eventually as I add more and more stuff, this page is seems pretty logical).\nIn building this out, I noticed that there are a lot of "),x=t("code"),j=p("Reactisms"),q=p(" to which I am becoming more accustomed."),S=o(),D=t("p"),O=p("For a little background, React requires each component to keep track of state using a member variable (called "),P=t("code"),T=p("state"),R=p("…\nshocker), and instead of adding listeners to a form, one is supposed to use "),F=t("code"),L=p("onChange"),M=p(" function pointers on the elements\nthemselves. Below is an example of a very simple component:"),_=o(),H=t("pre"),B=o(),G=t("p"),J=p("This does not seem so complicated, but one can imagine having several inputs on a "),N=t("code"),A=p("form"),z=p(" (though, we do not actually\nrequire forms anymore… a post for a different day) causing headaches from all these functions having to be created for\nsimply wanting to update state. So, instead we can simplify by creating an intuitive mapping:"),K=o(),Q=t("pre"),U=o(),V=t("p"),W=p("There, now we have an "),X=t("code"),Y=p("onChange"),Z=p(" function that works for all the inputs we have, provided we ensure that each has a\n"),$=t("code"),nn=p("name"),an=p(" attribute that corresponds to the same name of the state holding the value for that input."),sn=o(),tn=t("p"),pn=p("I have not played with this enough, but I suspect that I can abstract out the "),on=t("code"),en=p("inputChanged"),cn=p(" function into an abstract\nclass (well… it is JavaScript, so it will just be a class that one should treat as abstract)."),this.h()},l(n){a=e(n,"H1",{id:!0});var t=c(a);s=e(t,"A",{href:!0});var p=c(s);g=u(p,"Not Much Going on…"),p.forEach(i),t.forEach(i),f=l(n),m=e(n,"P",{});var o=c(m);v=u(o,"I have not had a lot of time to work on my blog in the last few days, and I have not written much since getting Let’s\nEncrypt running (without touching it since initial install, still going strong ^_^); so, I thought I would post\nsomething and change that."),o.forEach(i),w=l(n),y=e(n,"P",{});var r=c(y);b=u(r,"Firstly, I am working on getting a "),E=e(r,"CODE",{});var k=c(E);C=u(k,"preferences"),k.forEach(i),I=u(r," thing set up so that I can change simple used-everywhere stuff\n(signature and password change for now, but eventually as I add more and more stuff, this page is seems pretty logical).\nIn building this out, I noticed that there are a lot of "),x=e(r,"CODE",{});var h=c(x);j=u(h,"Reactisms"),h.forEach(i),q=u(r," to which I am becoming more accustomed."),r.forEach(i),S=l(n),D=e(n,"P",{});var d=c(D);O=u(d,"For a little background, React requires each component to keep track of state using a member variable (called "),P=e(d,"CODE",{});var un=c(P);T=u(un,"state"),un.forEach(i),R=u(d,"…\nshocker), and instead of adding listeners to a form, one is supposed to use "),F=e(d,"CODE",{});var ln=c(F);L=u(ln,"onChange"),ln.forEach(i),M=u(d," function pointers on the elements\nthemselves. Below is an example of a very simple component:"),d.forEach(i),_=l(n),H=e(n,"PRE",{class:!0}),c(H).forEach(i),B=l(n),G=e(n,"P",{});var rn=c(G);J=u(rn,"This does not seem so complicated, but one can imagine having several inputs on a "),N=e(rn,"CODE",{});var kn=c(N);A=u(kn,"form"),kn.forEach(i),z=u(rn," (though, we do not actually\nrequire forms anymore… a post for a different day) causing headaches from all these functions having to be created for\nsimply wanting to update state. So, instead we can simplify by creating an intuitive mapping:"),rn.forEach(i),K=l(n),Q=e(n,"PRE",{class:!0}),c(Q).forEach(i),U=l(n),V=e(n,"P",{});var hn=c(V);W=u(hn,"There, now we have an "),X=e(hn,"CODE",{});var dn=c(X);Y=u(dn,"onChange"),dn.forEach(i),Z=u(hn," function that works for all the inputs we have, provided we ensure that each has a\n"),$=e(hn,"CODE",{});var gn=c($);nn=u(gn,"name"),gn.forEach(i),an=u(hn," attribute that corresponds to the same name of the state holding the value for that input."),hn.forEach(i),sn=l(n),tn=e(n,"P",{});var fn=c(tn);pn=u(fn,"I have not played with this enough, but I suspect that I can abstract out the "),on=e(fn,"CODE",{});var mn=c(on);en=u(mn,"inputChanged"),mn.forEach(i),cn=u(fn," function into an abstract\nclass (well… it is JavaScript, so it will just be a class that one should treat as abstract)."),fn.forEach(i),this.h()},h(){r(s,"href","#not-much-going-on"),r(a,"id","not-much-going-on"),r(H,"class","language-jsx"),r(Q,"class","language-jsx")},m(n,t){k(n,a,t),h(a,s),h(s,g),k(n,f,t),k(n,m,t),h(m,v),k(n,w,t),k(n,y,t),h(y,b),h(y,E),h(E,C),h(y,I),h(y,x),h(x,j),h(y,q),k(n,S,t),k(n,D,t),h(D,O),h(D,P),h(P,T),h(D,R),h(D,F),h(F,L),h(D,M),k(n,_,t),k(n,H,t),H.innerHTML='<code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">_</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n        foo<span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// This is required for binding &#96;this&#96; correctly... a post for another day</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fooChanged <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fooChanged</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n    <span class="token function">fooChanged</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>foo<span class="token operator">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">return</span><span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n                <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n                <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span>\n                <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>fooChanged<span class="token punctuation">&#125;</span></span>\n            <span class="token punctuation">/></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',k(n,B,t),k(n,G,t),h(G,J),h(G,N),h(N,A),h(G,z),k(n,K,t),k(n,Q,t),Q.innerHTML='<code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">_</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>\n        foo<span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n        bar<span class="token operator">:</span> <span class="token string">\'\'</span>\n    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>inputChanged<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">inputChanged</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n    <span class="token function">inputChanged</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">let</span> newState <span class="token operator">=</span>  <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>\n        newState<span class="token punctuation">[</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n        <span class="token comment">// This will still evaluate to &#96;&#123;foo: event.target.value&#125;&#96;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n\n    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n        <span class="token keyword">return</span><span class="token punctuation">(</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>foo<span class="token punctuation">&#125;</span></span>\n                    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputChanged<span class="token punctuation">&#125;</span></span>\n                <span class="token punctuation">/></span></span><span class="token plain-text">\n                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>\n                    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bar<span class="token punctuation">"</span></span>\n                    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>bar<span class="token punctuation">&#125;</span></span>\n                    <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputChanged<span class="token punctuation">&#125;</span></span>\n                <span class="token punctuation">/></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">&#125;</span>\n<span class="token punctuation">&#125;</span></code>',k(n,U,t),k(n,V,t),h(V,W),h(V,X),h(X,Y),h(V,Z),h(V,$),h($,nn),h(V,an),k(n,sn,t),k(n,tn,t),h(tn,pn),h(tn,on),h(on,en),h(tn,cn)},p:d,i:d,o:d,d(n){n&&i(a),n&&i(f),n&&i(m),n&&i(w),n&&i(y),n&&i(S),n&&i(D),n&&i(_),n&&i(H),n&&i(B),n&&i(G),n&&i(K),n&&i(Q),n&&i(U),n&&i(V),n&&i(sn),n&&i(tn)}}}export default class extends n{constructor(n){super(),a(this,n,null,g,s,{})}}
