import{S as e,i as a,s as o,e as t,t as n,k as s,c as i,a as r,g as l,d as h,n as d,b as c,f,D as p,E as u}from"../../chunks/vendor-2299f040.js";function g(e){let a,o,g,m,y,b,v,w,E,I,z,B,K,S,k,A,P,T,O,x,M,R,D,J,C,L,j,F,G,N,U,q,Q,W,Y,H,V,X,Z,$,_,ee,ae,oe,te,ne,se,ie,re,le,he,de,ce,fe,pe,ue,ge,me,ye,be,ve,we,Ee,Ie,ze,Be,Ke,Se,ke,Ae,Pe,Te,Oe;return{c(){a=t("h1"),o=t("a"),g=n("Updates and Filesize"),m=s(),y=t("p"),b=n("I deployed the latest version of my blog software this morning, and I improved a few simple things:"),v=s(),w=t("ul"),E=t("li"),I=n("Moved around some of the logged-in links (none of you will see these, yet) for a better layout"),z=s(),B=t("li"),K=n("Added some preferences functionality (none of you will see this, yet)"),S=s(),k=t("li"),A=n("Added an "),P=t("a"),T=n("About"),O=n(" page which has a very short description of what this site is"),x=s(),M=t("li"),R=n("Added better styling for blockquote blocks"),D=s(),J=t("li"),C=n("Enabled "),L=t("code"),j=n("gzip"),F=n(" compression in "),G=t("code"),N=n("nginx"),U=s(),q=t("p"),Q=n("On that last note, I want to bring up some things I find interesting. First, I have been a long-standing opponent of\nSPAs (single-page applications) for a bevy of reasons, but a chief complaint had always been filesize. My tiny blog\nReact app after concatenation and minifaction (common JS production-grade processing) landed at a hefty ~775KB. I have\nhigh resolution images hosted at less volume than that."),W=s(),Y=t("p"),H=n("So, my natural inclination is to enable "),V=t("code"),X=n("gzip"),Z=n(" compression on the server, which I did, and that got the filesize down\nto ~200KB. While that sounds great (200 is much less than 775), when looking at a broader context it still comes up shy\nof great. "),$=t("code"),_=n("jQuery"),ee=n(", for instance, is a commonly used library and is often lamented as “too big” (as well as largely\nunnecessary now), but measures up at ~35KB "),ae=t("strong"),oe=n("before"),te=n(" compression, and likely that number gets down to the single-digit\nrange after."),ne=s(),se=t("p"),ie=n("“Apples and Oranges!” many of you will shout! “You are comparing a utility library to a fully fledged single page\napplication’s controller code [and entire framework codebase as well]”"),re=s(),le=t("p"),he=n("That is fair."),de=s(),ce=t("p"),fe=n("Maybe 200KB after compression is reasonable for a blog of this size built on ReactJS. My primary concern is not the\ncurrent size, but that of the size in the future."),pe=s(),ue=t("p"),ge=n("Today, the only JavaScript loaded is 249.26KB compressed (774.73KB uncompressed). The next time I build in a new module\nor do a new release, I am going to note what the size of the file becomes. My hope, and maybe this is naive, is that\nReactJS is "),me=t("strong"),ye=n("most"),be=n(" of that bloat, but I get to add tons of components relatively cheaply and that a much larger\nproduction application would avoid overly long waiting periods for the transmission of code."),ve=s(),we=t("p"),Ee=t("strong"),Ie=n("EDIT"),ze=s(),Be=t("p"),Ke=n("I just added a bunch of title stuff and created a base class from which all "),Se=t("code"),ke=n("Page"),Ae=n(" components extend, and now the build\nis 252.55KB compressed (787.18 uncompressed). The file I added was about 2KB in size prior to transpiling, so there is\na chance that transpilation blew it up to roughly 8KB in size, but there were other changes as well… so it is hard to\nsay for sure."),Pe=s(),Te=t("p"),Oe=n("Call me cautiously optimistic at this point!"),this.h()},l(e){a=i(e,"H1",{id:!0});var t=r(a);o=i(t,"A",{href:!0});var n=r(o);g=l(n,"Updates and Filesize"),n.forEach(h),t.forEach(h),m=d(e),y=i(e,"P",{});var s=r(y);b=l(s,"I deployed the latest version of my blog software this morning, and I improved a few simple things:"),s.forEach(h),v=d(e),w=i(e,"UL",{});var c=r(w);E=i(c,"LI",{});var f=r(E);I=l(f,"Moved around some of the logged-in links (none of you will see these, yet) for a better layout"),f.forEach(h),z=d(c),B=i(c,"LI",{});var p=r(B);K=l(p,"Added some preferences functionality (none of you will see this, yet)"),p.forEach(h),S=d(c),k=i(c,"LI",{});var u=r(k);A=l(u,"Added an "),P=i(u,"A",{href:!0});var xe=r(P);T=l(xe,"About"),xe.forEach(h),O=l(u," page which has a very short description of what this site is"),u.forEach(h),x=d(c),M=i(c,"LI",{});var Me=r(M);R=l(Me,"Added better styling for blockquote blocks"),Me.forEach(h),D=d(c),J=i(c,"LI",{});var Re=r(J);C=l(Re,"Enabled "),L=i(Re,"CODE",{});var De=r(L);j=l(De,"gzip"),De.forEach(h),F=l(Re," compression in "),G=i(Re,"CODE",{});var Je=r(G);N=l(Je,"nginx"),Je.forEach(h),Re.forEach(h),c.forEach(h),U=d(e),q=i(e,"P",{});var Ce=r(q);Q=l(Ce,"On that last note, I want to bring up some things I find interesting. First, I have been a long-standing opponent of\nSPAs (single-page applications) for a bevy of reasons, but a chief complaint had always been filesize. My tiny blog\nReact app after concatenation and minifaction (common JS production-grade processing) landed at a hefty ~775KB. I have\nhigh resolution images hosted at less volume than that."),Ce.forEach(h),W=d(e),Y=i(e,"P",{});var Le=r(Y);H=l(Le,"So, my natural inclination is to enable "),V=i(Le,"CODE",{});var je=r(V);X=l(je,"gzip"),je.forEach(h),Z=l(Le," compression on the server, which I did, and that got the filesize down\nto ~200KB. While that sounds great (200 is much less than 775), when looking at a broader context it still comes up shy\nof great. "),$=i(Le,"CODE",{});var Fe=r($);_=l(Fe,"jQuery"),Fe.forEach(h),ee=l(Le,", for instance, is a commonly used library and is often lamented as “too big” (as well as largely\nunnecessary now), but measures up at ~35KB "),ae=i(Le,"STRONG",{});var Ge=r(ae);oe=l(Ge,"before"),Ge.forEach(h),te=l(Le," compression, and likely that number gets down to the single-digit\nrange after."),Le.forEach(h),ne=d(e),se=i(e,"P",{});var Ne=r(se);ie=l(Ne,"“Apples and Oranges!” many of you will shout! “You are comparing a utility library to a fully fledged single page\napplication’s controller code [and entire framework codebase as well]”"),Ne.forEach(h),re=d(e),le=i(e,"P",{});var Ue=r(le);he=l(Ue,"That is fair."),Ue.forEach(h),de=d(e),ce=i(e,"P",{});var qe=r(ce);fe=l(qe,"Maybe 200KB after compression is reasonable for a blog of this size built on ReactJS. My primary concern is not the\ncurrent size, but that of the size in the future."),qe.forEach(h),pe=d(e),ue=i(e,"P",{});var Qe=r(ue);ge=l(Qe,"Today, the only JavaScript loaded is 249.26KB compressed (774.73KB uncompressed). The next time I build in a new module\nor do a new release, I am going to note what the size of the file becomes. My hope, and maybe this is naive, is that\nReactJS is "),me=i(Qe,"STRONG",{});var We=r(me);ye=l(We,"most"),We.forEach(h),be=l(Qe," of that bloat, but I get to add tons of components relatively cheaply and that a much larger\nproduction application would avoid overly long waiting periods for the transmission of code."),Qe.forEach(h),ve=d(e),we=i(e,"P",{});var Ye=r(we);Ee=i(Ye,"STRONG",{});var He=r(Ee);Ie=l(He,"EDIT"),He.forEach(h),Ye.forEach(h),ze=d(e),Be=i(e,"P",{});var Ve=r(Be);Ke=l(Ve,"I just added a bunch of title stuff and created a base class from which all "),Se=i(Ve,"CODE",{});var Xe=r(Se);ke=l(Xe,"Page"),Xe.forEach(h),Ae=l(Ve," components extend, and now the build\nis 252.55KB compressed (787.18 uncompressed). The file I added was about 2KB in size prior to transpiling, so there is\na chance that transpilation blew it up to roughly 8KB in size, but there were other changes as well… so it is hard to\nsay for sure."),Ve.forEach(h),Pe=d(e),Te=i(e,"P",{});var Ze=r(Te);Oe=l(Ze,"Call me cautiously optimistic at this point!"),Ze.forEach(h),this.h()},h(){c(o,"href","#updates-and-filesize"),c(a,"id","updates-and-filesize"),c(P,"href","/about")},m(e,t){f(e,a,t),p(a,o),p(o,g),f(e,m,t),f(e,y,t),p(y,b),f(e,v,t),f(e,w,t),p(w,E),p(E,I),p(w,z),p(w,B),p(B,K),p(w,S),p(w,k),p(k,A),p(k,P),p(P,T),p(k,O),p(w,x),p(w,M),p(M,R),p(w,D),p(w,J),p(J,C),p(J,L),p(L,j),p(J,F),p(J,G),p(G,N),f(e,U,t),f(e,q,t),p(q,Q),f(e,W,t),f(e,Y,t),p(Y,H),p(Y,V),p(V,X),p(Y,Z),p(Y,$),p($,_),p(Y,ee),p(Y,ae),p(ae,oe),p(Y,te),f(e,ne,t),f(e,se,t),p(se,ie),f(e,re,t),f(e,le,t),p(le,he),f(e,de,t),f(e,ce,t),p(ce,fe),f(e,pe,t),f(e,ue,t),p(ue,ge),p(ue,me),p(me,ye),p(ue,be),f(e,ve,t),f(e,we,t),p(we,Ee),p(Ee,Ie),f(e,ze,t),f(e,Be,t),p(Be,Ke),p(Be,Se),p(Se,ke),p(Be,Ae),f(e,Pe,t),f(e,Te,t),p(Te,Oe)},p:u,i:u,o:u,d(e){e&&h(a),e&&h(m),e&&h(y),e&&h(v),e&&h(w),e&&h(U),e&&h(q),e&&h(W),e&&h(Y),e&&h(ne),e&&h(se),e&&h(re),e&&h(le),e&&h(de),e&&h(ce),e&&h(pe),e&&h(ue),e&&h(ve),e&&h(we),e&&h(ze),e&&h(Be),e&&h(Pe),e&&h(Te)}}}export default class extends e{constructor(e){super(),a(this,e,null,g,o,{})}}
